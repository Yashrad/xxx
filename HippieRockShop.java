package Main;

import java.awt.Desktop;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Yash
 */
public class HippieRockShop extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public HippieRockShop() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        LabelStatus = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        NewItemPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ItemNameTF = new javax.swing.JTextField();
        ItemBuyPriceTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ItemSellPriceTF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemDescTF = new javax.swing.JTextArea();
        AddItemBT = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        ItemCategoryCB = new javax.swing.JComboBox<>();
        filechooserBTN = new javax.swing.JButton();
        itemremoveBT = new javax.swing.JButton();
        itemimageprev = new javax.swing.JLabel();
        NewCustomerPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        CustomerNameTF = new javax.swing.JTextField();
        CustomerPhoneTF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        CustomerDescTF = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        CustomerAddressTF = new javax.swing.JTextArea();
        AddCustomerBT = new javax.swing.JButton();
        removecustomerBT = new javax.swing.JButton();
        NewOrderPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        OrderItemCategoryCB = new javax.swing.JComboBox<>();
        OrderCustomerCB = new javax.swing.JComboBox<>();
        OrderPrepayTF = new javax.swing.JTextField();
        OrderPriceTF = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        OrderDescTF = new javax.swing.JTextArea();
        AddOrderBT = new javax.swing.JButton();
        OrderItemCB = new javax.swing.JComboBox<>();
        viewitemimginorder = new javax.swing.JLabel();
        OrderDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel22 = new javax.swing.JLabel();
        NewCostPanel = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        CostAdd = new javax.swing.JButton();
        CostAmountTF = new javax.swing.JTextField();
        CostDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane13 = new javax.swing.JScrollPane();
        CostDescTF = new javax.swing.JTextArea();
        ViewItemsPanel = new javax.swing.JPanel();
        Itemviewtable = new javax.swing.JScrollPane();
        ItemviewTable = new javax.swing.JTable();
        ItemEditBT = new javax.swing.JButton();
        Itemsviewtitlelabel = new javax.swing.JLabel();
        OrderitemfromviewBT = new javax.swing.JButton();
        ViewCustomersPanel = new javax.swing.JPanel();
        CustomersviewLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        CustomersViewTable = new javax.swing.JTable();
        customereditBT = new javax.swing.JButton();
        ViewShipmentPanel = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        ShipmentViewTable = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        ShipmentItemsList = new javax.swing.JList<>();
        shipmentdeliverydatepicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel26 = new javax.swing.JLabel();
        shipmentupdateBT = new javax.swing.JButton();
        ViewOrdersPanel = new javax.swing.JPanel();
        orderViewLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        OrderViewTable = new javax.swing.JTable();
        orderpayedlabel = new javax.swing.JLabel();
        deliveredlabel = new javax.swing.JLabel();
        deliveredChekbox = new javax.swing.JCheckBox();
        restpaymentTF = new javax.swing.JTextField();
        CompleteOrderBT = new javax.swing.JButton();
        restofpaymentLB = new javax.swing.JLabel();
        orderdescLabel2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        OrderdescTF2 = new javax.swing.JTextArea();
        deliverydatelabel = new javax.swing.JLabel();
        OrderDeliveryDate = new org.jdesktop.swingx.JXDatePicker();
        NewShipmentPanel = new javax.swing.JPanel();
        ShipmentTitleLB = new javax.swing.JLabel();
        ShipmentnameLB = new javax.swing.JLabel();
        ShipmentNameTF = new javax.swing.JTextField();
        ShipmentPriceLB = new javax.swing.JLabel();
        ShipmentPriceTF = new javax.swing.JTextField();
        ShipmentWeightLB = new javax.swing.JLabel();
        ShipmentWeightTF = new javax.swing.JTextField();
        ShipmentDateLB = new javax.swing.JLabel();
        ShipmentDatePicker = new org.jdesktop.swingx.JXDatePicker();
        ShipmentDescLB = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        ShipmentDescTF = new javax.swing.JTextArea();
        ShipmentAddBT = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        ShipmentItemTable = new javax.swing.JTable();
        CompletedOrdersPanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        CompletedOrdersTable = new javax.swing.JTable();
        ViewCostPanel = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        ExtraCostTable = new javax.swing.JTable();
        TotalSalePanel = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        asasd = new javax.swing.JLabel();
        Soodlabel = new javax.swing.JLabel();
        TotalBuyingLabel = new javax.swing.JLabel();
        TotalShipmentlabel = new javax.swing.JLabel();
        TotalExtracostLabel = new javax.swing.JLabel();
        CostSumLabel = new javax.swing.JLabel();
        TotalSellingLabel = new javax.swing.JLabel();
        fromdatepicker = new org.jdesktop.swingx.JXDatePicker();
        todatepicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        fromtoBT = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        Top5Items = new javax.swing.JList<>();
        jScrollPane16 = new javax.swing.JScrollPane();
        Top5Categories = new javax.swing.JList<>();
        jScrollPane17 = new javax.swing.JScrollPane();
        Top5Customers = new javax.swing.JList<>();
        FullReportBT = new javax.swing.JButton();
        MainMenuBar = new javax.swing.JMenuBar();
        NewMenuTab = new javax.swing.JMenu();
        NewItemMenuItem = new javax.swing.JMenuItem();
        NewCustomerMenuItem = new javax.swing.JMenuItem();
        NewOrderMenuItem = new javax.swing.JMenuItem();
        NewShipmentMenuItem = new javax.swing.JMenuItem();
        extraCostitemmenu = new javax.swing.JMenuItem();
        ViewMenu = new javax.swing.JMenu();
        ViewItemsMenuItem = new javax.swing.JMenuItem();
        ViewCustomersMenuItem = new javax.swing.JMenuItem();
        ViewShippingMenuItem = new javax.swing.JMenuItem();
        viewcostmenuitem = new javax.swing.JMenuItem();
        OrdersMenu = new javax.swing.JMenu();
        PendingOrdersMenuItem = new javax.swing.JMenuItem();
        ComplitedOrdersMenuItem = new javax.swing.JMenuItem();
        AccountingMenu = new javax.swing.JMenu();
        totalmenuitem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setName("MainFrame"); // NOI18N
        getContentPane().setLayout(new java.awt.CardLayout());

        MainPanel.setToolTipText("");
        MainPanel.setMinimumSize(new java.awt.Dimension(350, 300));
        MainPanel.setName(""); // NOI18N
        MainPanel.setPreferredSize(new java.awt.Dimension(400, 500));
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Vrinda", 1, 14)); // NOI18N
        jLabel1.setText("Hippie Rock Shop");
        MainPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 124, 34));
        MainPanel.add(LabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 130, 23));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/Icon.png"))); // NOI18N
        jLabel20.setText("jLabel20");
        MainPanel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 280, 190));

        getContentPane().add(MainPanel, "card5");
        MainPanel.setVisible(true);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("New Item");

        jLabel3.setText("Name: ");

        ItemNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemNameTFActionPerformed(evt);
            }
        });

        ItemBuyPriceTF.setText("0");
        ItemBuyPriceTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ItemBuyPriceTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ItemBuyPriceTFFocusLost(evt);
            }
        });
        ItemBuyPriceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemBuyPriceTFActionPerformed(evt);
            }
        });

        jLabel4.setText("Buying Price:");

        jLabel7.setText("Selling Price:");

        ItemSellPriceTF.setText("0");
        ItemSellPriceTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ItemSellPriceTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ItemSellPriceTFFocusLost(evt);
            }
        });
        ItemSellPriceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSellPriceTFActionPerformed(evt);
            }
        });

        jLabel8.setText("Descriptions:");

        ItemDescTF.setColumns(20);
        ItemDescTF.setRows(5);
        jScrollPane1.setViewportView(ItemDescTF);

        AddItemBT.setText("Add");
        AddItemBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemBTActionPerformed(evt);
            }
        });

        jLabel18.setText("Picture:");

        jLabel19.setText("Category:");

        ItemCategoryCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accesories", "Bags", "Beanies", "Clothes", "Earring", "Hippie Clothes", "Necklaces", "Rings", "Wallets" }));
        ItemCategoryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemCategoryCBActionPerformed(evt);
            }
        });

        filechooserBTN.setText("Choose Picture");
        filechooserBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filechooserBTNActionPerformed(evt);
            }
        });

        itemremoveBT.setText("Remove this Item");
        itemremoveBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemremoveBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NewItemPanelLayout = new javax.swing.GroupLayout(NewItemPanel);
        NewItemPanel.setLayout(NewItemPanelLayout);
        NewItemPanelLayout.setHorizontalGroup(
            NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewItemPanelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewItemPanelLayout.createSequentialGroup()
                        .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel19)
                                .addComponent(jLabel4)
                                .addComponent(jLabel7))
                            .addGroup(NewItemPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel8))
                            .addGroup(NewItemPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel3))
                            .addGroup(NewItemPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel18)))
                        .addGap(27, 27, 27)
                        .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NewItemPanelLayout.createSequentialGroup()
                                .addComponent(AddItemBT)
                                .addGap(41, 41, 41)
                                .addComponent(itemremoveBT))
                            .addComponent(ItemNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filechooserBTN)
                            .addComponent(ItemSellPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ItemCategoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ItemBuyPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewItemPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addComponent(itemimageprev, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        NewItemPanelLayout.setVerticalGroup(
            NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewItemPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ItemNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewItemPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filechooserBTN)
                            .addComponent(jLabel18))
                        .addGap(24, 24, 24)
                        .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewItemPanelLayout.createSequentialGroup()
                                .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(ItemCategoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ItemBuyPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(ItemSellPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(27, 27, 27))
                    .addGroup(NewItemPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(itemimageprev, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(NewItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddItemBT)
                    .addComponent(itemremoveBT))
                .addGap(70, 70, 70))
        );

        getContentPane().add(NewItemPanel, "card2");
        NewItemPanel.setVisible(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("New Customer");

        jLabel9.setText("Name:");

        jLabel10.setText("Phone:");

        jLabel12.setText("Adress:");

        jLabel14.setText("Descriptions:");

        CustomerDescTF.setColumns(20);
        CustomerDescTF.setRows(5);
        jScrollPane2.setViewportView(CustomerDescTF);

        CustomerAddressTF.setColumns(20);
        CustomerAddressTF.setRows(5);
        jScrollPane3.setViewportView(CustomerAddressTF);

        AddCustomerBT.setText("Add");
        AddCustomerBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCustomerBTActionPerformed(evt);
            }
        });

        removecustomerBT.setText("Remove This Customer");
        removecustomerBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removecustomerBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NewCustomerPanelLayout = new javax.swing.GroupLayout(NewCustomerPanel);
        NewCustomerPanel.setLayout(NewCustomerPanelLayout);
        NewCustomerPanelLayout.setHorizontalGroup(
            NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewCustomerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(238, 238, 238))
            .addGroup(NewCustomerPanelLayout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel12)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addComponent(CustomerPhoneTF)
                        .addComponent(jScrollPane3)
                        .addComponent(CustomerNameTF))
                    .addGroup(NewCustomerPanelLayout.createSequentialGroup()
                        .addComponent(AddCustomerBT)
                        .addGap(37, 37, 37)
                        .addComponent(removecustomerBT)))
                .addContainerGap(279, Short.MAX_VALUE))
        );
        NewCustomerPanelLayout.setVerticalGroup(
            NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewCustomerPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(CustomerNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(CustomerPhoneTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(NewCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddCustomerBT)
                    .addComponent(removecustomerBT))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        getContentPane().add(NewCustomerPanel, "card3");
        NewCustomerPanel.setVisible(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("New Order");

        jLabel11.setText("Item:");

        jLabel13.setText("Customer:");

        jLabel15.setText("Pre-Payment:");

        jLabel16.setText("Price:");

        jLabel17.setText("Descriptions:");

        OrderItemCategoryCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Category" }));
        OrderItemCategoryCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OrderItemCategoryCBItemStateChanged(evt);
            }
        });
        OrderItemCategoryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderItemCategoryCBActionPerformed(evt);
            }
        });

        OrderPrepayTF.setText("0");
        OrderPrepayTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OrderPrepayTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                OrderPrepayTFFocusLost(evt);
            }
        });
        OrderPrepayTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderPrepayTFActionPerformed(evt);
            }
        });

        OrderPriceTF.setText("0");
        OrderPriceTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OrderPriceTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                OrderPriceTFFocusLost(evt);
            }
        });

        OrderDescTF.setColumns(20);
        OrderDescTF.setRows(5);
        jScrollPane4.setViewportView(OrderDescTF);

        AddOrderBT.setText("Save");
        AddOrderBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddOrderBTActionPerformed(evt);
            }
        });

        OrderItemCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OrderItemCBItemStateChanged(evt);
            }
        });

        jLabel22.setText("Date:");

        javax.swing.GroupLayout NewOrderPanelLayout = new javax.swing.GroupLayout(NewOrderPanel);
        NewOrderPanel.setLayout(NewOrderPanelLayout);
        NewOrderPanelLayout.setHorizontalGroup(
            NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewOrderPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewOrderPanelLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel6))
                    .addGroup(NewOrderPanelLayout.createSequentialGroup()
                        .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel22))
                        .addGap(18, 18, 18)
                        .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OrderCustomerCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(NewOrderPanelLayout.createSequentialGroup()
                                .addComponent(OrderItemCategoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(OrderItemCB, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(NewOrderPanelLayout.createSequentialGroup()
                                .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OrderPrepayTF, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OrderPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OrderDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, Short.MAX_VALUE)
                                .addComponent(viewitemimginorder, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(32, 32, 32))
            .addGroup(NewOrderPanelLayout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(AddOrderBT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        NewOrderPanelLayout.setVerticalGroup(
            NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewOrderPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(OrderItemCategoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OrderItemCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OrderCustomerCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewOrderPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(OrderPrepayTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OrderPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addGap(20, 20, 20)
                        .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewOrderPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewitemimginorder, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(NewOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OrderDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(AddOrderBT)
                .addGap(84, 84, 84))
        );

        getContentPane().add(NewOrderPanel, "card4");
        NewOrderPanel.setVisible(false);

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setText("Extra Costs");

        jLabel28.setText("Amount:");

        jLabel29.setText("Date:");

        jLabel30.setText("Descriptions");

        CostAdd.setText("Add");
        CostAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CostAddActionPerformed(evt);
            }
        });

        CostAmountTF.setText("0");
        CostAmountTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CostAmountTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CostAmountTFFocusLost(evt);
            }
        });

        CostDescTF.setColumns(20);
        CostDescTF.setRows(5);
        jScrollPane13.setViewportView(CostDescTF);

        javax.swing.GroupLayout NewCostPanelLayout = new javax.swing.GroupLayout(NewCostPanel);
        NewCostPanel.setLayout(NewCostPanelLayout);
        NewCostPanelLayout.setHorizontalGroup(
            NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewCostPanelLayout.createSequentialGroup()
                .addGroup(NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewCostPanelLayout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel27))
                    .addGroup(NewCostPanelLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(35, 35, 35)
                        .addGroup(NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CostDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CostAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CostAdd))))
                .addContainerGap(341, Short.MAX_VALUE))
        );
        NewCostPanelLayout.setVerticalGroup(
            NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewCostPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel27)
                .addGap(47, 47, 47)
                .addGroup(NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(CostAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(CostDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(NewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(86, 86, 86)
                .addComponent(CostAdd)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        getContentPane().add(NewCostPanel, "card12");

        ItemviewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Category", "Selling"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Itemviewtable.setViewportView(ItemviewTable);
        if (ItemviewTable.getColumnModel().getColumnCount() > 0) {
            ItemviewTable.getColumnModel().getColumn(0).setResizable(false);
            ItemviewTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            ItemviewTable.getColumnModel().getColumn(1).setResizable(false);
            ItemviewTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            ItemviewTable.getColumnModel().getColumn(2).setResizable(false);
            ItemviewTable.getColumnModel().getColumn(2).setPreferredWidth(30);
            ItemviewTable.getColumnModel().getColumn(3).setResizable(false);
            ItemviewTable.getColumnModel().getColumn(3).setPreferredWidth(30);
        }

        ItemEditBT.setText("Edit Selected Item");
        ItemEditBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemEditBTActionPerformed(evt);
            }
        });

        Itemsviewtitlelabel.setText("Items");

        OrderitemfromviewBT.setText("Order!");
        OrderitemfromviewBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderitemfromviewBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewItemsPanelLayout = new javax.swing.GroupLayout(ViewItemsPanel);
        ViewItemsPanel.setLayout(ViewItemsPanelLayout);
        ViewItemsPanelLayout.setHorizontalGroup(
            ViewItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewItemsPanelLayout.createSequentialGroup()
                .addGroup(ViewItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewItemsPanelLayout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(Itemsviewtitlelabel))
                    .addGroup(ViewItemsPanelLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(Itemviewtable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ViewItemsPanelLayout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(ItemEditBT)
                        .addGap(55, 55, 55)
                        .addComponent(OrderitemfromviewBT, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(235, Short.MAX_VALUE))
        );
        ViewItemsPanelLayout.setVerticalGroup(
            ViewItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewItemsPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(Itemsviewtitlelabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Itemviewtable, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(ViewItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ItemEditBT)
                    .addComponent(OrderitemfromviewBT))
                .addGap(38, 38, 38))
        );

        getContentPane().add(ViewItemsPanel, "card6");

        CustomersviewLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CustomersviewLabel.setText("Customers");

        CustomersViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Phone", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CustomersViewTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(CustomersViewTable);
        if (CustomersViewTable.getColumnModel().getColumnCount() > 0) {
            CustomersViewTable.getColumnModel().getColumn(0).setResizable(false);
            CustomersViewTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            CustomersViewTable.getColumnModel().getColumn(1).setResizable(false);
            CustomersViewTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            CustomersViewTable.getColumnModel().getColumn(2).setResizable(false);
            CustomersViewTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            CustomersViewTable.getColumnModel().getColumn(3).setResizable(false);
            CustomersViewTable.getColumnModel().getColumn(3).setPreferredWidth(200);
        }

        customereditBT.setText("Edit Customer");
        customereditBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customereditBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewCustomersPanelLayout = new javax.swing.GroupLayout(ViewCustomersPanel);
        ViewCustomersPanel.setLayout(ViewCustomersPanelLayout);
        ViewCustomersPanelLayout.setHorizontalGroup(
            ViewCustomersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewCustomersPanelLayout.createSequentialGroup()
                .addGroup(ViewCustomersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewCustomersPanelLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(CustomersviewLabel))
                    .addGroup(ViewCustomersPanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ViewCustomersPanelLayout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(customereditBT)))
                .addContainerGap(218, Short.MAX_VALUE))
        );
        ViewCustomersPanelLayout.setVerticalGroup(
            ViewCustomersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewCustomersPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(CustomersviewLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(customereditBT)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        getContentPane().add(ViewCustomersPanel, "card7");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setText("Active Shipments");

        ShipmentViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ShipmentViewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShipmentViewTableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(ShipmentViewTable);
        if (ShipmentViewTable.getColumnModel().getColumnCount() > 0) {
            ShipmentViewTable.getColumnModel().getColumn(0).setResizable(false);
            ShipmentViewTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            ShipmentViewTable.getColumnModel().getColumn(1).setResizable(false);
            ShipmentViewTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            ShipmentViewTable.getColumnModel().getColumn(2).setResizable(false);
            ShipmentViewTable.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        jScrollPane12.setViewportView(ShipmentItemsList);

        jLabel26.setText("Delivery Date:");

        shipmentupdateBT.setText("Update");
        shipmentupdateBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shipmentupdateBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewShipmentPanelLayout = new javax.swing.GroupLayout(ViewShipmentPanel);
        ViewShipmentPanel.setLayout(ViewShipmentPanelLayout);
        ViewShipmentPanelLayout.setHorizontalGroup(
            ViewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewShipmentPanelLayout.createSequentialGroup()
                .addGroup(ViewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewShipmentPanelLayout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jLabel25))
                    .addGroup(ViewShipmentPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(ViewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ViewShipmentPanelLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addGap(29, 29, 29)
                                .addGroup(ViewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(shipmentupdateBT)
                                    .addComponent(shipmentdeliverydatepicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        ViewShipmentPanelLayout.setVerticalGroup(
            ViewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewShipmentPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ViewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(55, 55, 55)
                .addGroup(ViewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shipmentdeliverydatepicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addGap(49, 49, 49)
                .addComponent(shipmentupdateBT)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        getContentPane().add(ViewShipmentPanel, "card11");

        orderViewLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        orderViewLabel.setText("Pending Orders");

        OrderViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item", "Customer", "Prepay", "Total", "Date", "Dsc", "ShID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderViewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OrderViewTableMouseClicked(evt);
            }
        });
        OrderViewTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                OrderViewTablePropertyChange(evt);
            }
        });
        jScrollPane6.setViewportView(OrderViewTable);
        if (OrderViewTable.getColumnModel().getColumnCount() > 0) {
            OrderViewTable.getColumnModel().getColumn(0).setResizable(false);
            OrderViewTable.getColumnModel().getColumn(0).setPreferredWidth(5);
            OrderViewTable.getColumnModel().getColumn(1).setResizable(false);
            OrderViewTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            OrderViewTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            OrderViewTable.getColumnModel().getColumn(3).setResizable(false);
            OrderViewTable.getColumnModel().getColumn(3).setPreferredWidth(30);
            OrderViewTable.getColumnModel().getColumn(4).setResizable(false);
            OrderViewTable.getColumnModel().getColumn(4).setPreferredWidth(30);
            OrderViewTable.getColumnModel().getColumn(5).setResizable(false);
            OrderViewTable.getColumnModel().getColumn(5).setPreferredWidth(35);
            OrderViewTable.getColumnModel().getColumn(6).setResizable(false);
            OrderViewTable.getColumnModel().getColumn(6).setPreferredWidth(10);
            OrderViewTable.getColumnModel().getColumn(7).setResizable(false);
            OrderViewTable.getColumnModel().getColumn(7).setPreferredWidth(10);
        }

        orderpayedlabel.setText("Payed:");

        deliveredlabel.setText("Delivered??");

        deliveredChekbox.setText("Yes!");
        deliveredChekbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveredChekboxActionPerformed(evt);
            }
        });

        CompleteOrderBT.setText("Complete Order");
        CompleteOrderBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompleteOrderBTActionPerformed(evt);
            }
        });

        restofpaymentLB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        restofpaymentLB.setForeground(new java.awt.Color(153, 51, 0));

        orderdescLabel2.setText("Descriptions");

        jScrollPane7.setBorder(null);

        OrderdescTF2.setColumns(20);
        OrderdescTF2.setRows(5);
        OrderdescTF2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        OrderdescTF2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jScrollPane7.setViewportView(OrderdescTF2);

        deliverydatelabel.setText("Delivery Date:");

        javax.swing.GroupLayout ViewOrdersPanelLayout = new javax.swing.GroupLayout(ViewOrdersPanel);
        ViewOrdersPanel.setLayout(ViewOrdersPanelLayout);
        ViewOrdersPanelLayout.setHorizontalGroup(
            ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(restofpaymentLB, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(orderViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                        .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                                .addGap(220, 220, 220)
                                .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                                        .addComponent(deliveredlabel)
                                        .addGap(5, 5, 5))
                                    .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                                        .addComponent(orderpayedlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewOrdersPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(orderdescLabel2)
                                .addGap(18, 18, 18)))
                        .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(restpaymentTF, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deliveredChekbox)
                            .addComponent(OrderDeliveryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CompleteOrderBT)))
                    .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(deliverydatelabel)))
                .addGap(255, 286, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewOrdersPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane6)
                .addContainerGap())
        );
        ViewOrdersPanelLayout.setVerticalGroup(
            ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewOrdersPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(orderViewLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(restofpaymentLB, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deliveredlabel)
                    .addComponent(deliveredChekbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(restpaymentTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderpayedlabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deliverydatelabel)
                    .addComponent(OrderDeliveryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderdescLabel2)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(CompleteOrderBT)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        getContentPane().add(ViewOrdersPanel, "card8");

        ShipmentTitleLB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ShipmentTitleLB.setText("Shipment");

        ShipmentnameLB.setText("Name:");

        ShipmentNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShipmentNameTFActionPerformed(evt);
            }
        });

        ShipmentPriceLB.setText("Price:");

        ShipmentPriceTF.setText("0");
        ShipmentPriceTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ShipmentPriceTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ShipmentPriceTFFocusLost(evt);
            }
        });

        ShipmentWeightLB.setText("Weight");

        ShipmentWeightTF.setText("0");
        ShipmentWeightTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ShipmentWeightTFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ShipmentWeightTFFocusLost(evt);
            }
        });

        ShipmentDateLB.setText("Date:");

        ShipmentDescLB.setText("Descriptions:");

        ShipmentDescTF.setColumns(20);
        ShipmentDescTF.setRows(5);
        jScrollPane8.setViewportView(ShipmentDescTF);

        ShipmentAddBT.setText("Save");
        ShipmentAddBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShipmentAddBTActionPerformed(evt);
            }
        });

        jLabel23.setText("Kg");

        jLabel24.setText("Select Ordered Items");

        ShipmentItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Customer", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(ShipmentItemTable);
        if (ShipmentItemTable.getColumnModel().getColumnCount() > 0) {
            ShipmentItemTable.getColumnModel().getColumn(0).setResizable(false);
            ShipmentItemTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            ShipmentItemTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            ShipmentItemTable.getColumnModel().getColumn(2).setResizable(false);
            ShipmentItemTable.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        javax.swing.GroupLayout NewShipmentPanelLayout = new javax.swing.GroupLayout(NewShipmentPanel);
        NewShipmentPanel.setLayout(NewShipmentPanelLayout);
        NewShipmentPanelLayout.setHorizontalGroup(
            NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewShipmentPanelLayout.createSequentialGroup()
                .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewShipmentPanelLayout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(ShipmentTitleLB))
                    .addGroup(NewShipmentPanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ShipmentPriceLB)
                            .addComponent(ShipmentnameLB)
                            .addComponent(ShipmentWeightLB)
                            .addComponent(ShipmentDateLB)
                            .addComponent(ShipmentDescLB))
                        .addGap(28, 28, 28)
                        .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShipmentNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ShipmentAddBT)
                            .addComponent(ShipmentDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(NewShipmentPanelLayout.createSequentialGroup()
                                .addComponent(ShipmentWeightTF, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel23))
                            .addComponent(ShipmentPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewShipmentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(160, 160, 160))
        );
        NewShipmentPanelLayout.setVerticalGroup(
            NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewShipmentPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(ShipmentTitleLB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewShipmentPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShipmentnameLB)
                            .addComponent(ShipmentNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShipmentPriceLB)
                            .addComponent(ShipmentPriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShipmentWeightLB)
                            .addComponent(ShipmentWeightTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addGap(28, 28, 28)
                        .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShipmentDateLB)
                            .addComponent(ShipmentDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(NewShipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShipmentDescLB)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                        .addComponent(ShipmentAddBT)
                        .addGap(67, 67, 67))
                    .addGroup(NewShipmentPanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        getContentPane().add(NewShipmentPanel, "card9");

        jLabel21.setText("Completed Orders");

        CompletedOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item", "Customer", "Total", "Cargo", "Delivered"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        CompletedOrdersTable.setEnabled(false);
        jScrollPane9.setViewportView(CompletedOrdersTable);
        if (CompletedOrdersTable.getColumnModel().getColumnCount() > 0) {
            CompletedOrdersTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            CompletedOrdersTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            CompletedOrdersTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            CompletedOrdersTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            CompletedOrdersTable.getColumnModel().getColumn(4).setPreferredWidth(30);
            CompletedOrdersTable.getColumnModel().getColumn(5).setPreferredWidth(30);
        }

        javax.swing.GroupLayout CompletedOrdersPanelLayout = new javax.swing.GroupLayout(CompletedOrdersPanel);
        CompletedOrdersPanel.setLayout(CompletedOrdersPanelLayout);
        CompletedOrdersPanelLayout.setHorizontalGroup(
            CompletedOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CompletedOrdersPanelLayout.createSequentialGroup()
                .addGroup(CompletedOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CompletedOrdersPanelLayout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(jLabel21))
                    .addGroup(CompletedOrdersPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        CompletedOrdersPanelLayout.setVerticalGroup(
            CompletedOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CompletedOrdersPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        getContentPane().add(CompletedOrdersPanel, "card10");

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel31.setText("Extra Costs");

        ExtraCostTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Amount", "Date", "Descriptions"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane14.setViewportView(ExtraCostTable);
        if (ExtraCostTable.getColumnModel().getColumnCount() > 0) {
            ExtraCostTable.getColumnModel().getColumn(0).setResizable(false);
            ExtraCostTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            ExtraCostTable.getColumnModel().getColumn(1).setResizable(false);
            ExtraCostTable.getColumnModel().getColumn(1).setPreferredWidth(20);
            ExtraCostTable.getColumnModel().getColumn(2).setResizable(false);
            ExtraCostTable.getColumnModel().getColumn(2).setPreferredWidth(30);
            ExtraCostTable.getColumnModel().getColumn(3).setResizable(false);
            ExtraCostTable.getColumnModel().getColumn(3).setPreferredWidth(200);
        }

        javax.swing.GroupLayout ViewCostPanelLayout = new javax.swing.GroupLayout(ViewCostPanel);
        ViewCostPanel.setLayout(ViewCostPanelLayout);
        ViewCostPanelLayout.setHorizontalGroup(
            ViewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewCostPanelLayout.createSequentialGroup()
                .addGroup(ViewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewCostPanelLayout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(jLabel31))
                    .addGroup(ViewCostPanelLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        ViewCostPanelLayout.setVerticalGroup(
            ViewCostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewCostPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel31)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        getContentPane().add(ViewCostPanel, "card13");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel32.setText("Total Sales");

        jLabel33.setText("Total Buying Price:");

        jLabel34.setText("Total Shipment Cost:");

        jLabel35.setText("Total Extra Costs:");

        jLabel36.setText("Total Selling Prices:");

        jLabel37.setText("Total Costs Sum:");

        asasd.setText("soood!:");

        Soodlabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Soodlabel.setForeground(new java.awt.Color(51, 153, 0));
        Soodlabel.setText("0");
        Soodlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SoodlabelMouseClicked(evt);
            }
        });

        TotalBuyingLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        TotalBuyingLabel.setForeground(new java.awt.Color(204, 0, 51));
        TotalBuyingLabel.setText("0");

        TotalShipmentlabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        TotalShipmentlabel.setForeground(new java.awt.Color(204, 51, 0));
        TotalShipmentlabel.setText("0");

        TotalExtracostLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        TotalExtracostLabel.setForeground(new java.awt.Color(204, 51, 0));
        TotalExtracostLabel.setText("0");

        CostSumLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CostSumLabel.setForeground(new java.awt.Color(153, 0, 0));
        CostSumLabel.setText("0");

        TotalSellingLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        TotalSellingLabel.setForeground(new java.awt.Color(0, 102, 255));
        TotalSellingLabel.setText("0");

        jLabel38.setText("From");

        jLabel39.setText("To");

        fromtoBT.setText("Calculate!");
        fromtoBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromtoBTActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel40.setText("Top 5");

        jLabel41.setText("Items");

        jLabel42.setText("Categories");

        jLabel43.setText("Customers");

        jScrollPane15.setViewportView(Top5Items);

        jScrollPane16.setViewportView(Top5Categories);

        jScrollPane17.setViewportView(Top5Customers);

        FullReportBT.setText("Get Full Report!");
        FullReportBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullReportBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TotalSalePanelLayout = new javax.swing.GroupLayout(TotalSalePanel);
        TotalSalePanel.setLayout(TotalSalePanelLayout);
        TotalSalePanelLayout.setHorizontalGroup(
            TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalSalePanelLayout.createSequentialGroup()
                .addGap(0, 37, Short.MAX_VALUE)
                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TotalSalePanelLayout.createSequentialGroup()
                                .addGap(275, 275, 275)
                                .addComponent(jLabel32))
                            .addGroup(TotalSalePanelLayout.createSequentialGroup()
                                .addGap(263, 263, 263)
                                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fromtoBT)
                                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FullReportBT)))
                            .addGroup(TotalSalePanelLayout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                                        .addComponent(jLabel38)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fromdatepicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(76, 76, 76)
                                        .addComponent(jLabel39))
                                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel34)
                                            .addComponent(jLabel33)
                                            .addComponent(jLabel35))
                                        .addGap(30, 30, 30)
                                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(TotalExtracostLabel)
                                            .addComponent(TotalShipmentlabel)
                                            .addComponent(TotalBuyingLabel))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(todatepicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel37)
                                            .addComponent(jLabel36)
                                            .addComponent(asasd))
                                        .addGap(30, 30, 30)
                                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(TotalSellingLabel)
                                                .addComponent(CostSumLabel))
                                            .addGroup(TotalSalePanelLayout.createSequentialGroup()
                                                .addComponent(Soodlabel)
                                                .addGap(1, 1, 1)))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel41))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42))
                        .addGap(48, 48, 48)
                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel43)
                            .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(80, Short.MAX_VALUE))))
        );
        TotalSalePanelLayout.setVerticalGroup(
            TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TotalSalePanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel32)
                .addGap(37, 37, 37)
                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromdatepicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(todatepicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39))
                .addGap(18, 18, 18)
                .addComponent(fromtoBT)
                .addGap(33, 33, 33)
                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel35))
                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalBuyingLabel)
                            .addComponent(jLabel36))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalShipmentlabel)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalExtracostLabel)
                            .addComponent(asasd)))
                    .addGroup(TotalSalePanelLayout.createSequentialGroup()
                        .addComponent(TotalSellingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CostSumLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Soodlabel)))
                .addGap(45, 45, 45)
                .addComponent(FullReportBT)
                .addGap(18, 18, 18)
                .addComponent(jLabel40)
                .addGap(18, 18, 18)
                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42)
                    .addComponent(jLabel43))
                .addGap(18, 18, 18)
                .addGroup(TotalSalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(TotalSalePanel, "card14");

        NewMenuTab.setText("New");

        NewItemMenuItem.setText("Item");
        NewItemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewItemMenuItemActionPerformed(evt);
            }
        });
        NewMenuTab.add(NewItemMenuItem);

        NewCustomerMenuItem.setText("Customer");
        NewCustomerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewCustomerMenuItemActionPerformed(evt);
            }
        });
        NewMenuTab.add(NewCustomerMenuItem);

        NewOrderMenuItem.setText("Order");
        NewOrderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewOrderMenuItemActionPerformed(evt);
            }
        });
        NewMenuTab.add(NewOrderMenuItem);

        NewShipmentMenuItem.setText("Shipment");
        NewShipmentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewShipmentMenuItemActionPerformed(evt);
            }
        });
        NewMenuTab.add(NewShipmentMenuItem);

        extraCostitemmenu.setText("Extra Costs");
        extraCostitemmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraCostitemmenuActionPerformed(evt);
            }
        });
        NewMenuTab.add(extraCostitemmenu);

        MainMenuBar.add(NewMenuTab);

        ViewMenu.setText("View");

        ViewItemsMenuItem.setText("Items");
        ViewItemsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewItemsMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(ViewItemsMenuItem);

        ViewCustomersMenuItem.setText("Customers");
        ViewCustomersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewCustomersMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(ViewCustomersMenuItem);

        ViewShippingMenuItem.setText("Shipment");
        ViewShippingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewShippingMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(ViewShippingMenuItem);

        viewcostmenuitem.setText("Extra Costs");
        viewcostmenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewcostmenuitemActionPerformed(evt);
            }
        });
        ViewMenu.add(viewcostmenuitem);

        MainMenuBar.add(ViewMenu);

        OrdersMenu.setText("Orders");
        OrdersMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdersMenuActionPerformed(evt);
            }
        });

        PendingOrdersMenuItem.setText("Pending");
        PendingOrdersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PendingOrdersMenuItemActionPerformed(evt);
            }
        });
        OrdersMenu.add(PendingOrdersMenuItem);

        ComplitedOrdersMenuItem.setText("Completed");
        ComplitedOrdersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComplitedOrdersMenuItemActionPerformed(evt);
            }
        });
        OrdersMenu.add(ComplitedOrdersMenuItem);

        MainMenuBar.add(OrdersMenu);

        AccountingMenu.setText("Accounting");

        totalmenuitem.setText("Total");
        totalmenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalmenuitemActionPerformed(evt);
            }
        });
        AccountingMenu.add(totalmenuitem);

        MainMenuBar.add(AccountingMenu);

        setJMenuBar(MainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void NewCustomerMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_NewCustomerMenuItemActionPerformed
        HideAllPanels();
        LabelStatus.setText("");
        resetCustomerForm();
        NewCustomerPanel.setVisible(true);
    }//GEN-LAST:event_NewCustomerMenuItemActionPerformed

    private void NewItemMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_NewItemMenuItemActionPerformed
        
        HideAllPanels();
        LabelStatus.setText("");
        resetItemForm();
        NewItemPanel.setVisible(true);
       
    }//GEN-LAST:event_NewItemMenuItemActionPerformed

    private void ItemNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemNameTFActionPerformed

    private void ItemBuyPriceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemBuyPriceTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemBuyPriceTFActionPerformed

    private void NewOrderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewOrderMenuItemActionPerformed
        HideAllPanels();
        NewOrderPanel.setVisible(true);
        LabelStatus.setText("");
        resetOrderForm();
        
        fillcombo();
        
    }//GEN-LAST:event_NewOrderMenuItemActionPerformed

    private void ItemSellPriceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSellPriceTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemSellPriceTFActionPerformed

    private void AddItemBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemBTActionPerformed
           
        
        
        item = new Item();
        item.setName(ItemNameTF.getText().trim());
        item.setBuyingPrice(Double.parseDouble(ItemBuyPriceTF.getText().trim()));
        item.setSellingPrice(Double.parseDouble(ItemSellPriceTF.getText().trim()));
        item.isAvailable(true);
        item.setDescription(ItemDescTF.getText().trim());
        item.setCategory(ItemCategoryCB.getSelectedItem().toString());
        String query;
        
        if(AddItemBT.getText().equalsIgnoreCase("Update"))
        {
            AddItemBT.setEnabled(false);
            AddItemBT.setText("Saving...");
            query = "UPDATE items " +
            "SET " +
            "Name ='" +item.getName()+"',"+
            " Category ='" + item.getCategory()+"',"+
            " BuyingPrice ='" + item.getBuyingPrice()+"',"+
            " SellingPrice ='" + item.getSellingPrice()+"',"+
            " Descriptions ='" + item.getDescriptions()+"'"+
            " WHERE ItemID ='" + selectedItemID + "'";
            
            boolean removeflag = true;
            if(itemphotochanged)
            {
                
                if( removeitemphoto() && copyfile())
                    removeflag = true;
                else
                    removeflag = false;
            }
            
            if(UpdateSQL(query) && removeflag)
                LabelStatus.setText("Save Shod! :* ");
            else
                LabelStatus.setText("Nashod :/ ba man tamas begir!:D");
                
              
            
        }
        else{
            AddItemBT.setEnabled(false);
            AddItemBT.setText("Saving...");
        
        query = "INSERT INTO `items` (`Name`, `Category`, `BuyingPrice`, `SellingPrice` ,`Descriptions`) VALUES ('"+ item.getName() +"', '"+item.getCategory()+"', '"+item.getBuyingPrice()+"', '" +item.getSellingPrice()+"' ,'"+item.getDescriptions()+"');";

        
        if(insertSQL(query,true) && copyfile() ) 
        {
          LabelStatus.setText("Save Shod! :* ");
        }
            
        else
        {
         LabelStatus.setText("Nashod :/ ba man tamas begir!:D");
        }
        }
        
            itemphotochanged = false;  
            NewItemPanel.setVisible(false);
            MainPanel.setVisible(true);
        
    }//GEN-LAST:event_AddItemBTActionPerformed

    private void AddCustomerBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCustomerBTActionPerformed
        
        AddCustomerBT.setEnabled(false);
       
        
        customer = new Customer();
        customer.setName(CustomerNameTF.getText().trim());
        customer.setPhone(CustomerPhoneTF.getText().trim());
        customer.setAddress(CustomerAddressTF.getText().trim());
        customer.setDescriptions(CustomerDescTF.getText().trim());
        
        String query;
        if(AddCustomerBT.getText().equalsIgnoreCase("Update"))
        {
        query = "UPDATE customers " +
            "SET " +
            "Name='" +customer.getName()+"',"+
            " Phone='" + customer.getPhone()+"',"+
            " Address='" + customer.getAddress()+"',"+
            " Descriptions='" + customer.getDescriptions()+"'"+
            " WHERE CustomerID='" + selectedcustomerID + "'";
        
        }
        else 
        {
              query = "INSERT INTO `customers` (`Name`, `Phone`, `Address`, `Descriptions`) VALUES ('"+ customer.getName() +"', '"+ customer.getPhone() +"', '"+ customer.getAddress() +"', '"+ customer.getDescriptions() +"');";
        }
        if(UpdateSQL(query)){
           LabelStatus.setText("Save Shod! :* ");         
        }
         else
        {
         LabelStatus.setText("Nashod :/ ba man tamas begir!:D");
        }
        NewCustomerPanel.setVisible(false);
        MainPanel.setVisible(true);
            
        
        
    }//GEN-LAST:event_AddCustomerBTActionPerformed

    private void OrderPrepayTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderPrepayTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderPrepayTFActionPerformed

    private void ItemBuyPriceTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ItemBuyPriceTFFocusGained
        // TODO add your handling code here:
        if(ItemBuyPriceTF.getText().trim().equalsIgnoreCase("0"))            
           ItemBuyPriceTF.setText("");
            
    }//GEN-LAST:event_ItemBuyPriceTFFocusGained

    private void ItemBuyPriceTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ItemBuyPriceTFFocusLost
        if(ItemBuyPriceTF.getText().trim().isEmpty())
            ItemBuyPriceTF.setText("0");
    }//GEN-LAST:event_ItemBuyPriceTFFocusLost

    private void ItemSellPriceTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ItemSellPriceTFFocusGained
         if(ItemSellPriceTF.getText().trim().equalsIgnoreCase("0"))            
           ItemSellPriceTF.setText("");
    }//GEN-LAST:event_ItemSellPriceTFFocusGained

    private void ItemSellPriceTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ItemSellPriceTFFocusLost
         if(ItemSellPriceTF.getText().trim().isEmpty())
            ItemSellPriceTF.setText("0");
        
    }//GEN-LAST:event_ItemSellPriceTFFocusLost

    private void ItemCategoryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemCategoryCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemCategoryCBActionPerformed

    private void filechooserBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filechooserBTNActionPerformed
         
        filechooser();
        
    }//GEN-LAST:event_filechooserBTNActionPerformed

    private void OrderItemCategoryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderItemCategoryCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderItemCategoryCBActionPerformed

    private void AddOrderBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddOrderBTActionPerformed
            
            AddOrderBT.setText("Saving...");
            AddOrderBT.setEnabled(false);
            
            order = new Order();
            
            if(OrderItemCB.isEnabled())
                order.setItemID(Integer.parseInt(theitemID.get(OrderItemCB.getSelectedIndex()).toString()));
            else
                order.setItemID(Integer.parseInt(selectedItemID));
            
            order.setCustomerID(Integer.parseInt(thecustomerID.get(OrderCustomerCB.getSelectedIndex()).toString()));
            order.setPrepayment(Double.parseDouble(OrderPrepayTF.getText().trim()));
            order.setTotalPayment(Double.parseDouble(OrderPriceTF.getText().trim()));
            order.setDescriptions(OrderDescTF.getText().trim());
            
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat hour = new SimpleDateFormat("HH:mm:ss");
             OrderDatePicker.setFormats(dateFormat);
             Calendar cal = Calendar.getInstance();
             
             String DateandTime = ""; 
             DateandTime = dateFormat.format(OrderDatePicker.getDate()).toString()+" "+ hour.format(cal.getTime());
         
            
            order.setDateTime(DateandTime);
            
           //System.out.println(order.getItemID() + " -- " + order.getcustomerID());
           String query;
           query = "INSERT INTO `orders` (`ItemID`, `CustomerID`, `Prepayment`, `Totalpayment` , `DateTime` , `Descriptions`) VALUES ('"+ order.getItemID() +"', '"+order.getcustomerID()+"', '"+ order.getPrepayment()+"', '" +order.getTotalPayment()+ "' ,'" + order.getDateTime() + "', '"+order.getDescriptions()+"');";
            
           
             if(insertSQL(query,false)){
                LabelStatus.setText("Yesss! <3");         
              }
                 else
             {
               LabelStatus.setText("Nashod :/ ba man tamas begir!:D");
               }
              thecustomerID = null;
              theitemID = null;
              NewOrderPanel.setVisible(false);
              MainPanel.setVisible(true);
        
            
    }//GEN-LAST:event_AddOrderBTActionPerformed

    private void OrderItemCategoryCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OrderItemCategoryCBItemStateChanged
       
        OrderItemCB.setEnabled(true);
        if(actionlisteneractive && OrderItemCategoryCB.getItemCount() > 1) {
            listitembycat(OrderItemCategoryCB.getSelectedItem());
        }
        
    }//GEN-LAST:event_OrderItemCategoryCBItemStateChanged

    private void OrderPrepayTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OrderPrepayTFFocusGained
       if(OrderPrepayTF.getText().trim().equalsIgnoreCase("0"))            
           OrderPrepayTF.setText("");
    }//GEN-LAST:event_OrderPrepayTFFocusGained

    private void OrderPriceTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OrderPriceTFFocusGained
        if(OrderPriceTF.getText().trim().equalsIgnoreCase("0"))            
           OrderPriceTF.setText("");
    }//GEN-LAST:event_OrderPriceTFFocusGained

    private void OrderPrepayTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OrderPrepayTFFocusLost
        if(OrderPrepayTF.getText().trim().isEmpty())
            OrderPrepayTF.setText("0");
    }//GEN-LAST:event_OrderPrepayTFFocusLost

    private void OrderPriceTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OrderPriceTFFocusLost
        if(OrderPriceTF.getText().trim().isEmpty())
            OrderPriceTF.setText("0");
    }//GEN-LAST:event_OrderPriceTFFocusLost

    private void OrderItemCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OrderItemCBItemStateChanged
        if(actionlisteneractive)
        {
           OrderPriceTF.setText(theitemPrice.get(OrderItemCB.getSelectedIndex()).toString());
           String twochars = "";
           twochars =  OrderItemCategoryCB.getSelectedItem().toString().charAt(0) +""+ OrderItemCategoryCB.getSelectedItem().toString().charAt(1);
           itemphotoname = twochars.toUpperCase() +"_" + theitemID.get(OrderItemCB.getSelectedIndex()) +".jpg";
           showitemimageinorderform();
          
        }
    }//GEN-LAST:event_OrderItemCBItemStateChanged

    private void ViewItemsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewItemsMenuItemActionPerformed
        HideAllPanels();
        DefaultTableModel dm = (DefaultTableModel) ItemviewTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
}
        ShowItemsfromDB();
        ViewItemsPanel.setVisible(true);
        ItemviewTable.setAutoCreateRowSorter(true);
       
    }//GEN-LAST:event_ViewItemsMenuItemActionPerformed

    private void OrdersMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdersMenuActionPerformed

    }//GEN-LAST:event_OrdersMenuActionPerformed

    private void ItemEditBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemEditBTActionPerformed
     //  System.out.println(ItemviewTable.getValueAt(ItemviewTable.getSelectedRow(),0));

      Showedititem(ItemviewTable.getValueAt(ItemviewTable.getSelectedRow(),0).toString());
     
    }//GEN-LAST:event_ItemEditBTActionPerformed

    private void itemremoveBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemremoveBTActionPerformed

        if(removeitemphoto() && removeitemdb())
        {
            LabelStatus.setText("PaaQk shod! xo");
        }
        else
        {
           LabelStatus.setText("Nashode ke! :(");
        }
        NewItemPanel.setVisible(false);
        MainPanel.setVisible(true);
        
    }//GEN-LAST:event_itemremoveBTActionPerformed

    private void ViewCustomersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewCustomersMenuItemActionPerformed
        HideAllPanels();
        DefaultTableModel dm = (DefaultTableModel) CustomersViewTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
}
        showcustomersfromDB();
        ViewCustomersPanel.setVisible(true);
        CustomersViewTable.setAutoCreateRowSorter(true);
       
    }//GEN-LAST:event_ViewCustomersMenuItemActionPerformed

    private void OrderitemfromviewBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderitemfromviewBTActionPerformed
        vieworderform(ItemviewTable.getValueAt(ItemviewTable.getSelectedRow(),0).toString(),ItemviewTable.getValueAt(ItemviewTable.getSelectedRow(),1).toString(),ItemviewTable.getValueAt(ItemviewTable.getSelectedRow(),2).toString(),ItemviewTable.getValueAt(ItemviewTable.getSelectedRow(),3).toString());
    }//GEN-LAST:event_OrderitemfromviewBTActionPerformed

    private void customereditBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customereditBTActionPerformed
       Showeditcustomer(CustomersViewTable.getValueAt(CustomersViewTable.getSelectedRow(),0).toString());
     
    }//GEN-LAST:event_customereditBTActionPerformed

    private void removecustomerBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removecustomerBTActionPerformed
       if(removecustomer())
       {
           LabelStatus.setText("Paaq qark!");
           NewCustomerPanel.setVisible(false);
           MainPanel.setVisible(true);
       }
           
    }//GEN-LAST:event_removecustomerBTActionPerformed

    private void PendingOrdersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PendingOrdersMenuItemActionPerformed
        HideAllPanels();
        DefaultTableModel dm = (DefaultTableModel) OrderViewTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
}
        restofpaymentLB.setText("");
        ShowOrdersFromDB("Pending");
        ViewOrdersPanel.setVisible(true);
        OrderViewTable.setAutoCreateRowSorter(true);
        deliveredChekbox.setVisible(false);
        deliveredlabel.setVisible(false);
        orderpayedlabel.setVisible(false);
        restpaymentTF.setVisible(false);
        CompleteOrderBT.setVisible(false);
        OrderdescTF2.setVisible(false);
             orderdescLabel2.setVisible(false);
             OrderDeliveryDate.setVisible(false);
             deliverydatelabel.setVisible(false);
    }//GEN-LAST:event_PendingOrdersMenuItemActionPerformed

    private void deliveredChekboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveredChekboxActionPerformed
        if(deliveredChekbox.isSelected())
        {
            if(!OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),7).toString().equalsIgnoreCase("0"))
            {    
            orderpayedlabel.setVisible(true);
            restpaymentTF.setVisible(true);
            CompleteOrderBT.setVisible(true);
            OrderdescTF2.setVisible(true);
            orderdescLabel2.setVisible(true);
            OrderDeliveryDate.setVisible(true);
            deliverydatelabel.setVisible(true);
            
            Date date = new Date();
            OrderDeliveryDate.setDate(date);
        
            Integer restP = Integer.parseInt(OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),4).toString()) - Integer.parseInt(OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),3).toString());
            restpaymentTF.setText(restP.toString());
            OrderdescTF2.setText(OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),6).toString());
            }
            else
            {
                final ImageIcon icon = new ImageIcon("wtf.png");
                JOptionPane.showMessageDialog(this,
                        "","Kkkqqq",JOptionPane.INFORMATION_MESSAGE,icon);
                
                JOptionPane.showMessageDialog(this,
                        "Ba khar ferestadish? >:|","Ntch",JOptionPane.INFORMATION_MESSAGE);
                 

                
                deliveredChekbox.setSelected(false);
            } 
        }
        else
        {
             orderpayedlabel.setVisible(false);
             restpaymentTF.setVisible(false);
             CompleteOrderBT.setVisible(false);
             deliveredChekbox.setVisible(false);
             deliveredlabel.setVisible(false);
             OrderdescTF2.setVisible(false);
             orderdescLabel2.setVisible(false);
             OrderDeliveryDate.setVisible(false);
             deliverydatelabel.setVisible(false);
             
        }
    }//GEN-LAST:event_deliveredChekboxActionPerformed

    private void OrderViewTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_OrderViewTablePropertyChange
       
    }//GEN-LAST:event_OrderViewTablePropertyChange

    private void OrderViewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderViewTableMouseClicked
       
        deliveredChekbox.setVisible(true);
        deliveredlabel.setVisible(true);
        deliveredChekbox.setSelected(false);
        orderpayedlabel.setVisible(false);
        restpaymentTF.setVisible(false);
        CompleteOrderBT.setVisible(false);
             OrderdescTF2.setVisible(false);
             orderdescLabel2.setVisible(false);
             OrderDeliveryDate.setVisible(false);
             deliverydatelabel.setVisible(false);
        Integer restP = Integer.parseInt(OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),4).toString()) - Integer.parseInt(OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),3).toString());
        restofpaymentLB.setText("Rest of Payment:   " + restP);
        
    }//GEN-LAST:event_OrderViewTableMouseClicked

    private void CompleteOrderBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompleteOrderBTActionPerformed
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat hour = new SimpleDateFormat("HH:mm:ss");
             OrderDeliveryDate.setFormats(dateFormat);
             Calendar cal = Calendar.getInstance();

             String DateandTime = dateFormat.format(OrderDeliveryDate.getDate()).toString()+" "+ hour.format(cal.getTime());
        
        String query = "";
        int sum = 0;
        sum = Integer.parseInt(OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),3).toString()) + Integer.parseInt(restpaymentTF.getText());
        query = "UPDATE orders " +
            "SET " +
            "Status='Completed' ,"+
            " DeliveryDate= '"+  DateandTime + "' ,"+  
             " descriptions= '"+  OrderdescTF2.getText().trim() + "' ,"+  
            "TotalPayment ='"+ sum + "' " +
            " WHERE OrderID='" + OrderViewTable.getValueAt(OrderViewTable.getSelectedRow(),0).toString() + "'";
        if(UpdateSQL(query))
        {
            JOptionPane.showMessageDialog(rootPane, "Done! > < ");
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Nashod :/");
        }
        
        DefaultTableModel dm = (DefaultTableModel) OrderViewTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
}
        
        ShowOrdersFromDB("Pending");
        restofpaymentLB.setText("");
        if(OrderViewTable.getModel().getRowCount()==0)
        {
            LabelStatus.setText("What's Up Chaghaloo!? :D");
            ViewOrdersPanel.setVisible(false);
            MainPanel.setVisible(true);
        }
        
        deliveredChekbox.setVisible(false);
        deliveredlabel.setVisible(false);
        orderpayedlabel.setVisible(false);
        restpaymentTF.setVisible(false);
        CompleteOrderBT.setVisible(false);
          OrderdescTF2.setVisible(false);
             orderdescLabel2.setVisible(false);
             OrderDeliveryDate.setVisible(false);
             deliverydatelabel.setVisible(false);
        OrderViewTable.setAutoCreateRowSorter(true);
        
        
    }//GEN-LAST:event_CompleteOrderBTActionPerformed

    private void ShipmentNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShipmentNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShipmentNameTFActionPerformed

    private void NewShipmentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewShipmentMenuItemActionPerformed
        HideAllPanels();
        NewShipmentPanel.setVisible(true);
        LabelStatus.setText("");
        resetshipmentform();
        fillshipmentorder("Pending");
      
    }//GEN-LAST:event_NewShipmentMenuItemActionPerformed

    private void ShipmentAddBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShipmentAddBTActionPerformed
        shipment = new Shipment();
        shipment.setName(ShipmentNameTF.getText().trim());
        shipment.setPrice(Double.parseDouble(ShipmentPriceTF.getText().trim()));
        shipment.setWeight(Double.parseDouble(ShipmentWeightTF.getText().trim()));
        shipment.setDescriptions(ShipmentDescTF.getText().trim());
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat hour = new SimpleDateFormat("HH:mm:ss");
             ShipmentDatePicker.setFormats(dateFormat);
             Calendar cal = Calendar.getInstance();
             
             String DateandTime = ""; 
             DateandTime = dateFormat.format(ShipmentDatePicker.getDate()).toString()+" "+ hour.format(cal.getTime());
         shipment.setDate(DateandTime);
         
        
        
        
        if(ShipmentorderDB() && OrderShipmentUpdateDB())
        {
         NewShipmentPanel.setVisible(false);
         MainPanel.setVisible(true);
         LabelStatus.setText("Kheiliam aali (y)");
        
        }
            
       
            
       /* 
        for(int i=0 ; i < ShipmentItemTable.getRowCount(); i++)
        {
           if(ShipmentItemTable.getValueAt(i,2).toString().equalsIgnoreCase("true"))
             System.out.println(ShipmentItems.get(i));
         }
        */
    }//GEN-LAST:event_ShipmentAddBTActionPerformed

    private void ComplitedOrdersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComplitedOrdersMenuItemActionPerformed
       HideAllPanels();
        DefaultTableModel dm = (DefaultTableModel) CompletedOrdersTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
}
        ShowCOrdersFromDB("Completed");
        CompletedOrdersPanel.setVisible(true);
    }//GEN-LAST:event_ComplitedOrdersMenuItemActionPerformed

    private void ShipmentPriceTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShipmentPriceTFFocusGained
       if(ShipmentPriceTF.getText().trim().equalsIgnoreCase("0"))            
           ShipmentPriceTF.setText("");
    }//GEN-LAST:event_ShipmentPriceTFFocusGained

    private void ShipmentWeightTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShipmentWeightTFFocusGained
       if(ShipmentWeightTF.getText().trim().equalsIgnoreCase("0"))            
           ShipmentWeightTF.setText("");
                                      
    }//GEN-LAST:event_ShipmentWeightTFFocusGained

    private void ShipmentPriceTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShipmentPriceTFFocusLost
        if(ShipmentPriceTF.getText().trim().isEmpty())
            ShipmentPriceTF.setText("0");
    }//GEN-LAST:event_ShipmentPriceTFFocusLost

    private void ShipmentWeightTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShipmentWeightTFFocusLost
       if(ShipmentWeightTF.getText().trim().isEmpty())
            ShipmentWeightTF.setText("0");
    }//GEN-LAST:event_ShipmentWeightTFFocusLost

    private void ViewShippingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewShippingMenuItemActionPerformed
        HideAllPanels();
        DefaultTableModel dm = (DefaultTableModel) ShipmentViewTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
}
        showactiveshipment();
        ViewShipmentPanel.setVisible(true);
        ShipmentViewTable.setAutoCreateRowSorter(true);
        jLabel26.setVisible(false);
        shipmentdeliverydatepicker.setVisible(false);
        shipmentupdateBT.setVisible(false);
        ShipmentItemsList.removeAll();
        
       
    }//GEN-LAST:event_ViewShippingMenuItemActionPerformed

    private void ShipmentViewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShipmentViewTableMouseClicked

        ShipmentItemsList.removeAll();
        ShipmentItemlistDB(ShipmentViewTable.getValueAt(ShipmentViewTable.getSelectedRow(),0).toString());
        jLabel26.setVisible(true);
        shipmentdeliverydatepicker.setVisible(true);
        shipmentupdateBT.setVisible(true);
        Date date = new Date();
        shipmentdeliverydatepicker.setDate(date);
        
    }//GEN-LAST:event_ShipmentViewTableMouseClicked

    private void shipmentupdateBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shipmentupdateBTActionPerformed
       updateshipmentDeliveryDate(ShipmentViewTable.getValueAt(ShipmentViewTable.getSelectedRow(),0).toString());
       ViewShipmentPanel.setVisible(false);
       MainPanel.setVisible(true);
       LabelStatus.setText("Chaghaaloo :* ");
    }//GEN-LAST:event_shipmentupdateBTActionPerformed

    private void extraCostitemmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraCostitemmenuActionPerformed
       HideAllPanels();
       resetCostform();
       NewCostPanel.setVisible(true);
    }//GEN-LAST:event_extraCostitemmenuActionPerformed

    private void CostAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CostAddActionPerformed
       CostAdd.setEnabled(false);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat hour = new SimpleDateFormat("HH:mm:ss");
             CostDatePicker.setFormats(dateFormat);
             Calendar cal = Calendar.getInstance();
             
             String DateandTime = ""; 
             DateandTime = dateFormat.format(CostDatePicker.getDate()).toString()+" "+ hour.format(cal.getTime());
       
       String query = "";
       query = "INSERT INTO `costs` (`Amount`, `Date`, `Descriptions`) VALUES ('"+ Double.parseDouble(CostAmountTF.getText().trim()) +"', '"+ DateandTime +"', '"+ CostDescTF.getText().trim() +"');";
       if(insertSQL(query,false))
           LabelStatus.setText("Fada Saret :*");
       else
           LabelStatus.setText("NAshode QE! :/");
       
       NewCostPanel.setVisible(false);
       MainPanel.setVisible(true);
    }//GEN-LAST:event_CostAddActionPerformed

    private void CostAmountTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CostAmountTFFocusGained
       if(CostAmountTF.getText().trim().equalsIgnoreCase("0"))            
           CostAmountTF.setText("");
    }//GEN-LAST:event_CostAmountTFFocusGained

    private void CostAmountTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CostAmountTFFocusLost
        if(CostAmountTF.getText().trim().isEmpty())
            CostAmountTF.setText("0");
    }//GEN-LAST:event_CostAmountTFFocusLost

    private void viewcostmenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewcostmenuitemActionPerformed
        HideAllPanels();
        DefaultTableModel dm = (DefaultTableModel) ExtraCostTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
        }
        fillcosttable();
        ViewCostPanel.setVisible(true);
    
        

    }//GEN-LAST:event_viewcostmenuitemActionPerformed

    private void totalmenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalmenuitemActionPerformed
       
       initializeTotalSalePanel();
       HideAllPanels();
       TotalSalePanel.setVisible(true);
        
    }//GEN-LAST:event_totalmenuitemActionPerformed

    private void fromtoBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromtoBTActionPerformed
             
      calculateprofit();
    }//GEN-LAST:event_fromtoBTActionPerformed

    private void SoodlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SoodlabelMouseClicked
       JOptionPane.showMessageDialog(this,
       "pool mano bede :(  :D");
    }//GEN-LAST:event_SoodlabelMouseClicked

    private void FullReportBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullReportBTActionPerformed
       createfullPDFreport();
       
    }//GEN-LAST:event_FullReportBTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HippieRockShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HippieRockShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HippieRockShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HippieRockShop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HippieRockShop().setVisible(true);
            }
        });

    }
    
    //Database info
    final private String url = "jdbc:mysql://last2182284839.db.2182284.hostedresource.com:3307/last2182284839";
    final private String username = "last2182284839";
    final private String password = "h!q40eoL"; 
    //
    private String itemphotoname;
    private boolean itemphotochanged;
    private boolean actionlisteneractive = true;
    private String selectedItemID;
    private String ThisShipment;
    private String selectedcustomerID;
    private String myDocuments ="";
    private String newfilename;
    private File filesource;
    private Item item;
    private Customer customer;
    private Shipment shipment;
    private List ShipmentItems;
    private List thecustomerID;
    private List theitemID;
    private List theitemPrice;
    private Order order;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AccountingMenu;
    private javax.swing.JButton AddCustomerBT;
    private javax.swing.JButton AddItemBT;
    private javax.swing.JButton AddOrderBT;
    private javax.swing.JButton CompleteOrderBT;
    private javax.swing.JPanel CompletedOrdersPanel;
    private javax.swing.JTable CompletedOrdersTable;
    private javax.swing.JMenuItem ComplitedOrdersMenuItem;
    private javax.swing.JButton CostAdd;
    private javax.swing.JTextField CostAmountTF;
    private org.jdesktop.swingx.JXDatePicker CostDatePicker;
    private javax.swing.JTextArea CostDescTF;
    private javax.swing.JLabel CostSumLabel;
    private javax.swing.JTextArea CustomerAddressTF;
    private javax.swing.JTextArea CustomerDescTF;
    private javax.swing.JTextField CustomerNameTF;
    private javax.swing.JTextField CustomerPhoneTF;
    private javax.swing.JTable CustomersViewTable;
    private javax.swing.JLabel CustomersviewLabel;
    private javax.swing.JTable ExtraCostTable;
    private javax.swing.JButton FullReportBT;
    private javax.swing.JTextField ItemBuyPriceTF;
    private javax.swing.JComboBox<String> ItemCategoryCB;
    private javax.swing.JTextArea ItemDescTF;
    private javax.swing.JButton ItemEditBT;
    private javax.swing.JTextField ItemNameTF;
    private javax.swing.JTextField ItemSellPriceTF;
    private javax.swing.JLabel Itemsviewtitlelabel;
    private javax.swing.JTable ItemviewTable;
    private javax.swing.JScrollPane Itemviewtable;
    private javax.swing.JLabel LabelStatus;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel NewCostPanel;
    private javax.swing.JMenuItem NewCustomerMenuItem;
    private javax.swing.JPanel NewCustomerPanel;
    private javax.swing.JMenuItem NewItemMenuItem;
    private javax.swing.JPanel NewItemPanel;
    private javax.swing.JMenu NewMenuTab;
    private javax.swing.JMenuItem NewOrderMenuItem;
    private javax.swing.JPanel NewOrderPanel;
    private javax.swing.JMenuItem NewShipmentMenuItem;
    private javax.swing.JPanel NewShipmentPanel;
    private javax.swing.JComboBox<String> OrderCustomerCB;
    private org.jdesktop.swingx.JXDatePicker OrderDatePicker;
    private org.jdesktop.swingx.JXDatePicker OrderDeliveryDate;
    private javax.swing.JTextArea OrderDescTF;
    private javax.swing.JComboBox<String> OrderItemCB;
    private javax.swing.JComboBox<String> OrderItemCategoryCB;
    private javax.swing.JTextField OrderPrepayTF;
    private javax.swing.JTextField OrderPriceTF;
    private javax.swing.JTable OrderViewTable;
    private javax.swing.JTextArea OrderdescTF2;
    private javax.swing.JButton OrderitemfromviewBT;
    private javax.swing.JMenu OrdersMenu;
    private javax.swing.JMenuItem PendingOrdersMenuItem;
    private javax.swing.JButton ShipmentAddBT;
    private javax.swing.JLabel ShipmentDateLB;
    private org.jdesktop.swingx.JXDatePicker ShipmentDatePicker;
    private javax.swing.JLabel ShipmentDescLB;
    private javax.swing.JTextArea ShipmentDescTF;
    private javax.swing.JTable ShipmentItemTable;
    private javax.swing.JList<String> ShipmentItemsList;
    private javax.swing.JTextField ShipmentNameTF;
    private javax.swing.JLabel ShipmentPriceLB;
    private javax.swing.JTextField ShipmentPriceTF;
    private javax.swing.JLabel ShipmentTitleLB;
    private javax.swing.JTable ShipmentViewTable;
    private javax.swing.JLabel ShipmentWeightLB;
    private javax.swing.JTextField ShipmentWeightTF;
    private javax.swing.JLabel ShipmentnameLB;
    private javax.swing.JLabel Soodlabel;
    private javax.swing.JList<String> Top5Categories;
    private javax.swing.JList<String> Top5Customers;
    private javax.swing.JList<String> Top5Items;
    private javax.swing.JLabel TotalBuyingLabel;
    private javax.swing.JLabel TotalExtracostLabel;
    private javax.swing.JPanel TotalSalePanel;
    private javax.swing.JLabel TotalSellingLabel;
    private javax.swing.JLabel TotalShipmentlabel;
    private javax.swing.JPanel ViewCostPanel;
    private javax.swing.JMenuItem ViewCustomersMenuItem;
    private javax.swing.JPanel ViewCustomersPanel;
    private javax.swing.JMenuItem ViewItemsMenuItem;
    private javax.swing.JPanel ViewItemsPanel;
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JPanel ViewOrdersPanel;
    private javax.swing.JPanel ViewShipmentPanel;
    private javax.swing.JMenuItem ViewShippingMenuItem;
    private javax.swing.JLabel asasd;
    private javax.swing.JButton customereditBT;
    private javax.swing.JCheckBox deliveredChekbox;
    private javax.swing.JLabel deliveredlabel;
    private javax.swing.JLabel deliverydatelabel;
    private javax.swing.JMenuItem extraCostitemmenu;
    private javax.swing.JButton filechooserBTN;
    private org.jdesktop.swingx.JXDatePicker fromdatepicker;
    private javax.swing.JButton fromtoBT;
    private javax.swing.JLabel itemimageprev;
    private javax.swing.JButton itemremoveBT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel orderViewLabel;
    private javax.swing.JLabel orderdescLabel2;
    private javax.swing.JLabel orderpayedlabel;
    private javax.swing.JButton removecustomerBT;
    private javax.swing.JLabel restofpaymentLB;
    private javax.swing.JTextField restpaymentTF;
    private org.jdesktop.swingx.JXDatePicker shipmentdeliverydatepicker;
    private javax.swing.JButton shipmentupdateBT;
    private org.jdesktop.swingx.JXDatePicker todatepicker;
    private javax.swing.JMenuItem totalmenuitem;
    private javax.swing.JMenuItem viewcostmenuitem;
    private javax.swing.JLabel viewitemimginorder;
    // End of variables declaration//GEN-END:variables

    private void HideAllPanels() {
        
    
        Component[] components = this.getContentPane().getComponents();
        for (Component component : components) {
            if (component.getClass().getName().equals("javax.swing.JPanel")) {
                component.setVisible(false);
            }
        }
   
      
    }

    private boolean insertSQL(String strsql,boolean getlastindex){
    
       //database local
      //  String url = "jdbc:mysql://localhost:3306/hippierockshop";
       // String username = "root";
       // String password = "yashar573";
        

        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             if(getlastindex)
             {
             stmt.executeUpdate(strsql,Statement.RETURN_GENERATED_KEYS);
             ResultSet rs = stmt.getGeneratedKeys();
             if(rs.next())
               // newfilename = "_" + rs.getInt(1);
                selectedItemID = "" + rs.getInt(1);
             rs.close();
             }
             else {
                 stmt.executeUpdate(strsql);
             }
             stmt.close();
             connection.close();
          
             
            } catch (SQLException e) {
               return false;
            }
        
        return true;
    }
    
    private boolean copyfile() {
     /*  
        if(myDocuments.equalsIgnoreCase(""))
        {
            try {
              Process p =  Runtime.getRuntime().exec("reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\" /v personal");
                p.waitFor();

               InputStream in = p.getInputStream();
                byte[] b = new byte[in.available()];
                in.read(b);
                in.close();

                 myDocuments = new String(b);
                 myDocuments = myDocuments.split("\\s\\s+")[4];
                 //System.out.println("Getting My doc > " + myDocuments);
            

             } 
        catch(Exception e) {
              return false;
                   }
        }
        */
       try{
        String twochars = "";
        twochars =  item.getCategory().charAt(0) +""+ item.getCategory().charAt(1);
        newfilename = twochars.toUpperCase() +"_"+ selectedItemID; 
       
        
        
        File dest = new File(System.getProperty("user.dir") + "/Pictures");
        String rename = System.getProperty("user.dir")+  "/Pictures/"+newfilename+".jpg";
        
        if(!dest.exists())
           dest.mkdir();
        
        FileUtils.copyFile(FileUtils.getFile(filesource.getPath()) , FileUtils.getFile(rename));

        }
       catch(Exception e) {
           return false;
       }
       
       return true;
        
    }

    private void filechooser() {
        
  
            final JFileChooser fc = new JFileChooser(); 
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                filesource = fc.getSelectedFile();
                filechooserBTN.setText("Change picture!?");
                fc.setVisible(false);
                AddItemBT.setEnabled(true);
                itemphotochanged = true;
                
                showitemicon(true);
                
            } else {
                fc.setVisible(false);
            }
           
            
        }

    private void resetCustomerForm() {
        CustomerNameTF.setText("");
        CustomerPhoneTF.setText("");
        CustomerAddressTF.setText("");
        CustomerDescTF.setText("");       
        AddCustomerBT.setText("Add");
        AddCustomerBT.setEnabled(true);
        removecustomerBT.setVisible(false);

    }

    private void resetItemForm() {
        ItemNameTF.setText("");
        ItemBuyPriceTF.setText("0");
        ItemSellPriceTF.setText("0");   
        ItemCategoryCB.setSelectedIndex(0);
        filechooserBTN.setText("Choose picture");
        ItemDescTF.setText("");
        AddItemBT.setText("Add");
        AddItemBT.setEnabled(true);
        newfilename = "";
        itemremoveBT.setVisible(false);
        itemimageprev.setIcon(null);

    }

     private void resetOrderForm() {
         
        actionlisteneractive = false; 
        OrderItemCategoryCB.removeAllItems();
        OrderItemCategoryCB.addItem("Choose Category");
        OrderItemCB.removeAllItems();

        OrderCustomerCB.removeAllItems();

        
        OrderPrepayTF.setText("0");
        OrderPriceTF.setText("0");
        OrderDescTF.setText("");
        OrderItemCB.setEnabled(false);
        AddOrderBT.setText("Save");
        AddOrderBT.setEnabled(true);
        OrderItemCategoryCB.setEnabled(true);
        viewitemimginorder.setIcon(null);
        actionlisteneractive = true;
        Date date = new Date();
        OrderDatePicker.setDate(date);
        
        
    }
    private void fillcombo() {
        actionlisteneractive = false;
        // String[] theitemID  = new String[5];
        thecustomerID = new ArrayList();
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
            //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT DISTINCT Category FROM items";
             //String strsql = "SELECT * FROM items";
             ResultSet rs = stmt.executeQuery(strsql);
             
            
             while(rs.next())
                OrderItemCategoryCB.addItem(rs.getString("Category"));
             
             rs.close();
             stmt.close();
             connection.close();
             fillcustomercombo();
            
             actionlisteneractive =true;
          
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
    }

    private void listitembycat(Object selectedItem) {
        
        actionlisteneractive = false;
        OrderItemCB.removeAllItems();
        OrderItemCategoryCB.removeItem("Choose Category");
        theitemID = new ArrayList();
        theitemPrice = new ArrayList();
         try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT Name,ItemID,SellingPrice FROM items WHERE Category ='" + selectedItem.toString()+"'";
          
             ResultSet rs = stmt.executeQuery(strsql);
             
             while(rs.next())
             {    
                OrderItemCB.addItem(rs.getString("Name"));
                theitemID.add(rs.getString("ItemID"));
                theitemPrice.add(rs.getString("SellingPrice"));
             
             }
             
             rs.close();
             stmt.close();
             connection.close();
             actionlisteneractive = true;
             OrderItemCB.setSelectedIndex(0);
             String twochars= "";
           twochars =  OrderItemCategoryCB.getSelectedItem().toString().charAt(0) +""+ OrderItemCategoryCB.getSelectedItem().toString().charAt(1);
           itemphotoname = twochars.toUpperCase() +"_" + theitemID.get(OrderItemCB.getSelectedIndex()) +".jpg";
             showitemimageinorderform();
             OrderPriceTF.setText(theitemPrice.get(OrderItemCB.getSelectedIndex()).toString());

             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
       
    }

    private void ShowItemsfromDB() {
           
             
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT ItemID,Name,Category,SellingPrice FROM items";

             DefaultTableModel dtm = (DefaultTableModel) ItemviewTable.getModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 dtm.addRow(new Object[] { rs.getString("ItemID"), rs.getString("Name"),rs.getString("Category"),rs.getString("SellingPrice") } );
                 
                 
             }
             
             ItemviewTable.setModel(dtm);
             
             
            // ItemviewTable.setModel(DbUtils.resultSetToTableModel(rs));
            
             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
       
        
    }

    private void Showedititem(String ItemID) {
        selectedItemID = ItemID;
        //System.out.println(selectedItemID);
        String query = "SELECT * FROM items WHERE ItemID='"+selectedItemID+"'";
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();

             ResultSet rs = stmt.executeQuery(query);
             while(rs.next())
             {
                
                 item = new Item();
                 item.setCategory(rs.getString("Category"));
                 
                 ItemNameTF.setText(rs.getString("Name"));
                 ItemBuyPriceTF.setText(rs.getString("BuyingPrice"));
                 ItemSellPriceTF.setText(rs.getString("SellingPrice"));
                 ItemCategoryCB.setSelectedItem(rs.getString("Category"));
                 ItemDescTF.setText(rs.getString("Descriptions"));
                 AddItemBT.setText("Update");
                 filechooserBTN.setText("Change Picture?");
                 String twochars= "";
                 twochars =  item.getCategory().charAt(0) +""+ item.getCategory().charAt(1);
                 itemphotoname = twochars.toUpperCase() +"_" + selectedItemID +".jpg";
                 
             }
             rs.close();
             stmt.close();
             connection.close();
             HideAllPanels();
             AddItemBT.setEnabled(true);
             NewItemPanel.setVisible(true);
             itemremoveBT.setVisible(true);
             showitemicon(false);
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
        
        
        
        
    }

    private boolean UpdateSQL(String query) {
        
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();

             stmt.executeUpdate(query);

             stmt.close();
             connection.close();
 
            } 
           catch (SQLException e) {
               System.out.println(e.toString());
               return false;
            }
        return true;
        
    }

    private boolean removeitemphoto() {
        //String twochars= "";
        //twochars =  item.getCategory().charAt(0) +""+ item.getCategory().charAt(1);
       try{
        File fl = new File(System.getProperty("user.dir") + "\\Pictures\\"+ itemphotoname);
        fl.delete();
       
        return true;
       }
       catch(Exception e){
           return false;
       }
        
        
    }

    private boolean removeitemdb() {
        
         try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             String query = "DELETE FROM items WHERE ItemID='"+selectedItemID+"'";
             Statement stmt = connection.createStatement();

             stmt.executeUpdate(query);

             stmt.close();
             connection.close();
          
             
            } 
           catch (SQLException e) {
               System.out.println(e.toString());
               return false;
            }
        return true;
        
    }

    private void showitemicon(boolean reset) {
        
             
             if(reset)
             {
             ImageIcon img = new ImageIcon(new ImageIcon(filesource.getPath()).getImage().getScaledInstance(itemimageprev.getWidth(), itemimageprev.getHeight(), Image.SCALE_DEFAULT));
             itemimageprev.setIcon(img);
         
             }
             else
             {
             ImageIcon img = new ImageIcon(new ImageIcon(System.getProperty("user.dir") + "\\Pictures\\"+ itemphotoname).getImage().getScaledInstance(itemimageprev.getWidth(), itemimageprev.getHeight(), Image.SCALE_DEFAULT));
             itemimageprev.setIcon(img);
             }
    }

    private void vieworderform(String id,String name,String cat,String price) {
        actionlisteneractive = false;
        selectedItemID = id;
        OrderItemCategoryCB.setSelectedItem(cat);
        OrderItemCategoryCB.setEnabled(false);
        OrderItemCB.addItem(name);
        OrderItemCB.setSelectedItem(name);
        OrderItemCB.setEnabled(false);
        fillcustomercombo();
        OrderPrepayTF.setText("0");
        OrderPriceTF.setText(price);
        actionlisteneractive = true;
        String twochars = "";
        twochars = cat.charAt(0) +""+ cat.charAt(1);
        itemphotoname = twochars.toUpperCase() +"_" + selectedItemID +".jpg";
        showitemimageinorderform();
        AddOrderBT.setText("Save");
        AddOrderBT.setEnabled(true);
        ViewItemsPanel.setVisible(false);
        NewOrderPanel.setVisible(true);
        Date date = new Date();
        OrderDatePicker.setDate(date);

    }

    private void fillcustomercombo() {
        
        thecustomerID = new ArrayList();
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
            Statement stmt = connection.createStatement();
     
             String strsql = "SELECT CustomerID, Name FROM customers";
             ResultSet rs = stmt.executeQuery(strsql);
             rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 OrderCustomerCB.addItem(rs.getString("Name"));
                 thecustomerID.add(rs.getString("CustomerID"));
             
             }
             OrderCustomerCB.setSelectedIndex(0);
            

             rs.close();
             stmt.close();
             connection.close();
          
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
    }

    private void showitemimageinorderform() {
        
            
       
        ImageIcon img = new ImageIcon(new ImageIcon(System.getProperty("user.dir") + "\\Pictures\\"+ itemphotoname).getImage().getScaledInstance(viewitemimginorder.getWidth(), viewitemimginorder.getHeight(), Image.SCALE_DEFAULT));
             viewitemimginorder.setIcon(img);
    }

    private void showcustomersfromDB() {
              
             
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT CustomerID,Name,Phone,Address FROM customers";

             DefaultTableModel dtm = (DefaultTableModel) CustomersViewTable.getModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 dtm.addRow(new Object[] { rs.getString("CustomerID"), rs.getString("Name"),rs.getString("Phone"),rs.getString("Address") } );
                 
             }
             
             CustomersViewTable.setModel(dtm);
             
            
            
             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
       
    }

    private void Showeditcustomer(String cid) {
         selectedcustomerID = cid;
          try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
            Statement stmt = connection.createStatement();
     
             String strsql = "SELECT * FROM customers WHERE CustomerID ='"+ selectedcustomerID +"'";
             ResultSet rs = stmt.executeQuery(strsql);
             rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 CustomerNameTF.setText(rs.getString("Name"));
                 CustomerPhoneTF.setText(rs.getString("Phone"));
                 CustomerAddressTF.setText(rs.getString("Address"));
                 CustomerDescTF.setText(rs.getString("Descriptions"));

             }
            
             rs.close();
             stmt.close();
             connection.close();
             
          
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
          ViewCustomersPanel.setVisible(false);
          NewCustomerPanel.setVisible(true);
          AddCustomerBT.setText("Update");
          AddCustomerBT.setEnabled(true);
          removecustomerBT.setEnabled(true);
          removecustomerBT.setVisible(true);

         
    }

    private boolean removecustomer() {
         try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             String query = "DELETE FROM customers WHERE CustomerID='"+selectedcustomerID+"'";
             Statement stmt = connection.createStatement();

             stmt.executeUpdate(query);

             stmt.close();
             connection.close();
          
             
            } 
           catch (SQLException e) {
               System.out.println(e.toString());
               return false;
            }
        return true;
        
    }

    private void ShowOrdersFromDB(String status) {
         try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT orders.ShipmentID,orders.descriptions,orders.Datetime,orders.OrderID,items.Name,customers.Name,orders.Prepayment,orders.Totalpayment FROM orders "
                     + "join items ON orders.ItemID = items.ItemID "
                     + "join customers ON orders.CustomerID = customers.CustomerID "
                     + "WHERE orders.Status='"+status+"'";

             DefaultTableModel dtm = (DefaultTableModel) OrderViewTable.getModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 dtm.addRow(new Object[] { rs.getString("orders.OrderID"), rs.getString("items.Name"),rs.getString("customers.Name"),rs.getString("orders.Prepayment"),rs.getString("orders.Totalpayment"),rs.getDate("orders.Datetime"),rs.getString("orders.Descriptions"),rs.getString("orders.ShipmentID")   } );
                 
             }
             
             OrderViewTable.setModel(dtm);
             

             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
    }

    private void fillshipmentorder(String status) {
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT orders.OrderID,items.Name,customers.Name FROM orders "
                     + "join items ON orders.ItemID = items.ItemID "
                     + "join customers ON orders.CustomerID = customers.CustomerID "
                     + "WHERE orders.Status='"+status+"' AND orders.ShipmentID = '0'";

             DefaultTableModel dtm = (DefaultTableModel) ShipmentItemTable.getModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             ShipmentItems = new ArrayList();
             while(rs.next())
             {
                 dtm.addRow(new Object[] { rs.getString("items.Name"),rs.getString("customers.Name"),false} );
                 ShipmentItems.add(rs.getString("orders.OrderID"));
             }
             
             ShipmentItemTable.setModel(dtm);
             

             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
    }

    private void resetshipmentform() {

        ShipmentNameTF.setText("");
        ShipmentPriceTF.setText("0");
        ShipmentWeightTF.setText("0");
        ShipmentDescTF.setText("");
        DefaultTableModel dm = (DefaultTableModel) ShipmentItemTable.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
        dm.removeRow(i);
}
        Date date = new Date();
        ShipmentDatePicker.setDate(date);
    }

    private boolean ShipmentorderDB() {
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
            String strsql = "INSERT INTO shipment (Name , Price, Weight , Descriptions , Date)" +
                   "VALUES ('" + shipment.getName() + "' , "+
                   "'"+ shipment.getPrice() +"' , " +
                    "'"+ shipment.getWeight() +"' , " +
                   "'"+ shipment.getDescriptions() +"' , " +
                    "'" + shipment.getDate() + "' )";
             stmt.executeUpdate(strsql,Statement.RETURN_GENERATED_KEYS);
             ResultSet rs = stmt.getGeneratedKeys();
             if(rs.next())
                ThisShipment = "" + rs.getInt(1);
             rs.close();
        
             
             stmt.close();
             connection.close();
          return true;
             
            } catch (SQLException e) {
                System.out.println(e.toString());
               return false;
            }
        
    }

    private boolean OrderShipmentUpdateDB() {
         try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
          
        String query;
        for(int i=0 ; i < ShipmentItemTable.getRowCount(); i++)
        {
           if(ShipmentItemTable.getValueAt(i,2).toString().equalsIgnoreCase("true"))
           {
            query = "UPDATE orders " +
            "SET " +
            "ShipmentID ='" + ThisShipment +"'"+
            " WHERE OrderID ='" + ShipmentItems.get(i) + "'";
            stmt.addBatch(query);
           }
         }
             stmt.executeBatch();
             stmt.close();
             connection.close();
             return true;
        
        
        } 
        
         catch (SQLException e) {
               System.out.println(e.toString());
               return false;
            }
        
    }

    private void ShowCOrdersFromDB(String status) {
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT shipment.Name,orders.DeliveryDate,orders.OrderID,items.Name,customers.Name,orders.Totalpayment FROM orders "
                     + "join items ON orders.ItemID = items.ItemID "
                     + "join customers ON orders.CustomerID = customers.CustomerID "
                     + "join shipment ON orders.ShipmentID = shipment.ShipmentID "
                     + "WHERE orders.Status='"+status+"'";

             DefaultTableModel dtm = (DefaultTableModel) CompletedOrdersTable.getModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 dtm.addRow(new Object[] { rs.getString("orders.OrderID"), rs.getString("items.Name"),rs.getString("customers.Name"),rs.getString("orders.Totalpayment"),rs.getString("shipment.Name"), rs.getDate("orders.DeliveryDate")  } );
                 
             }
             
             CompletedOrdersTable.setModel(dtm);
             

             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
    }

    private void showactiveshipment() {
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT ShipmentID,Name,Date FROM shipment WHERE DeliveryDate IS NULL";

             DefaultTableModel dtm = (DefaultTableModel) ShipmentViewTable.getModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 dtm.addRow(new Object[] { rs.getString("ShipmentID"), rs.getString("Name"),rs.getDate("Date")} );
                 
             }
             
             ShipmentViewTable.setModel(dtm);
             
            
            
             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
       
    }

    private void ShipmentItemlistDB(String SHID) {
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT items.Name FROM orders join "
                     +"items ON orders.ItemID = items.ItemID "
                     + " WHERE orders.ShipmentID ='" + SHID +"'";
             
             DefaultListModel dtm = new DefaultListModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             int i = 1;
             while(rs.next())
             {
                dtm.addElement(i + " - " + rs.getString("items.Name"));
                 i++;
             }
             ShipmentItemsList.setModel(dtm);
             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
    }

    private void updateshipmentDeliveryDate(String shid) {
          try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
          
        String query;
       DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat hour = new SimpleDateFormat("HH:mm:ss");
             shipmentdeliverydatepicker.setFormats(dateFormat);
             Calendar cal = Calendar.getInstance();
             
             String DateandTime = ""; 
             DateandTime = dateFormat.format(shipmentdeliverydatepicker.getDate()).toString()+" "+ hour.format(cal.getTime());
            query = "UPDATE shipment " +
            "SET " +
            "DeliveryDate ='" + DateandTime +"'"+
            " WHERE ShipmentID ='" + shid + "'";
       
             stmt.executeUpdate(query);
             stmt.close();
             connection.close();
        
        
        
        } 
        
         catch (SQLException e) {
            }
    }

    private void resetCostform() {
        CostAmountTF.setText("0");
        Date date = new Date();
        CostDatePicker.setDate(date);
        CostDescTF.setText("");
        CostAdd.setEnabled(true);
    }

    private void fillcosttable() {
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             String strsql = "SELECT * FROM costs";

             DefaultTableModel dtm = (DefaultTableModel) ExtraCostTable.getModel();
             
             ResultSet rs = stmt.executeQuery(strsql);
             while(rs.next())
             {
                 dtm.addRow(new Object[] { rs.getString("CostID"),rs.getString("Amount"),rs.getDate("Date"), rs.getString("Descriptions")} );
                 
             }
             
             ExtraCostTable.setModel(dtm);
             
            
            
             rs.close();
             stmt.close();
             connection.close();
           
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
    }

    private void calculateprofit() {
        try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             fromdatepicker.setFormats(dateFormat);
             todatepicker.setFormats(dateFormat);
             Calendar cal = Calendar.getInstance();
             
             String FROM = ""; 
             String TO = "";
             FROM = dateFormat.format(fromdatepicker.getDate());
             TO = dateFormat.format(todatepicker.getDate());
             
             String strsql = "SELECT sum(orders.TotalPayment) as TOTALSELL,sum(items.BuyingPrice) as TOTALBUYING from orders "
                     + " join items ON items.ItemID = orders.ItemID "
                     + "WHERE orders.status = 'Completed' AND orders.DeliveryDate BETWEEN '"+ FROM + "' AND '" + TO + "'";
             
             ResultSet rs = stmt.executeQuery(strsql);
             rs.next();
             
             if(rs.getString(1) != null ) {
             TotalSellingLabel.setText(rs.getString("TOTALSELL") + ".0");
             TotalBuyingLabel.setText(rs.getString("TOTALBUYING")+ ".0");
             }
             else
             {
             TotalSellingLabel.setText("0");
             TotalBuyingLabel.setText("0");
             }
             
             strsql = "SELECT  sum(shipment.Price) as TSH FROM shipment "
                     + "WHERE ShipmentID in (SELECT DISTINCT ShipmentID from orders WHERE orders.status = 'Completed' AND orders.DeliveryDate BETWEEN '"+ FROM + "' AND '" + TO + "')";
             rs = stmt.executeQuery(strsql);
             rs.next();
             if(rs.getString("TSH") != null )
              TotalShipmentlabel.setText(rs.getString("TSH"));
             else
              TotalShipmentlabel.setText("0");  
             
             strsql = "SELECT sum(Amount) from costs Where Date BETWEEN '"+ FROM + "' AND '" + TO + "'";
             rs = stmt.executeQuery(strsql);
             rs.next();
             if(rs.getString(1) != null )
              TotalExtracostLabel.setText(rs.getString(1)+ ".0");
             else
               TotalExtracostLabel.setText("0");  
             
             
             
             //TOP 5
             
             DefaultListModel dtm = new DefaultListModel();
             strsql = "SELECT items.Name,orders.ItemID,COUNT(orders.ItemID) as cnt from "
                     + "orders join items ON orders.ItemID = items.ItemID "
                     + "WHERE orders.status = 'Completed' AND orders.DeliveryDate BETWEEN '"+ FROM + "' AND '" + TO + "'"
                     + "Group By orders.ItemID Order By cnt DESC limit 5";
             rs = stmt.executeQuery(strsql);
            
             int i = 1;
             while(rs.next())
             {
                dtm.addElement(i + " - " + rs.getString("items.Name") + " >  " + rs.getString("cnt"));
                 i++;
             }
             Top5Items.setModel(dtm);
             
             
             dtm = new DefaultListModel();
             strsql = "SELECT items.Category,orders.ItemID,COUNT(items.Category) as cnt from "
                     + "orders join items ON orders.ItemID = items.ItemID "
                     + "WHERE orders.status = 'Completed' AND orders.DeliveryDate BETWEEN '"+ FROM + "' AND '" + TO + "'"
                     + "Group By items.Category Order By cnt DESC limit 5";
             rs = stmt.executeQuery(strsql);
            
             i = 1;
             while(rs.next())
             {
                dtm.addElement(i + " - " + rs.getString("items.Category") + " >  " + rs.getString("cnt"));
                 i++;
             }
             Top5Categories.setModel(dtm);
             
             dtm = new DefaultListModel();
             strsql = "SELECT customers.Name,orders.CustomerID,COUNT(orders.CustomerID) as cnt from "
                     + "orders join customers ON orders.CustomerID = customers.CustomerID "
                     + "WHERE orders.status = 'Completed' AND orders.DeliveryDate BETWEEN '"+ FROM + "' AND '" + TO + "'"
                     + "Group By customers.CustomerID Order By cnt DESC limit 5";
             rs = stmt.executeQuery(strsql);
            
             i = 1;
             while(rs.next())
             {
                dtm.addElement(i + " - " + rs.getString("customers.Name") + " >  " + rs.getString("cnt"));
                 i++;
             }
             Top5Customers.setModel(dtm);
             
             
             rs.close();
             stmt.close();
             connection.close();
             Double totalcost = Double.parseDouble(TotalBuyingLabel.getText()) + Double.parseDouble(TotalShipmentlabel.getText()) + Double.parseDouble(TotalExtracostLabel.getText());
             
            CostSumLabel.setText(totalcost.toString());
            Double profit = Double.parseDouble(TotalSellingLabel.getText()) - totalcost;
            Soodlabel.setText(profit.toString());
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }
        FullReportBT.setVisible(true);
    }

    private void initializeTotalSalePanel() {
        Date date = new Date();
       todatepicker.setDate(date);
       Calendar cal = Calendar.getInstance();
       cal.setTime(date);
       cal.set(Calendar.MONTH,1);
       date = cal.getTime();
       fromdatepicker.setDate(date);

       DefaultListModel md = new DefaultListModel();
       md.clear();
       Top5Items.setModel(md);
       Top5Customers.setModel(md);
       Top5Categories.setModel(md);
       
       TotalBuyingLabel.setText("0");
       TotalExtracostLabel.setText("0");
       TotalShipmentlabel.setText("0");
       TotalSellingLabel.setText("0");
       CostSumLabel.setText("0");
       Soodlabel.setText("0");
      // FullReportBT.setVisible(false);
    }

    private void createfullPDFreport() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             fromdatepicker.setFormats(dateFormat);
             todatepicker.setFormats(dateFormat);
             Calendar cal = Calendar.getInstance();
             
             String FROM = ""; 
             String TO = "";
             FROM = dateFormat.format(fromdatepicker.getDate());
             TO = dateFormat.format(todatepicker.getDate());
        try {
                   Document OrdersDoc = new Document();
                   File dest = new File(System.getProperty("user.dir") + "/Reports");

                     if(!dest.exists())
                       dest.mkdir();
                    
                    PdfWriter.getInstance(OrdersDoc, new FileOutputStream("Reports/"+FROM+"TO"+TO+".pdf"));
                    OrdersDoc.open();
            
                    // OrdersDoc.add(new Paragraph("Suppliers"));

                    OrdersDoc.add(new Paragraph("Full Report From "+FROM +" To " + TO ,FontFactory.getFont(FontFactory.TIMES_BOLD, 14, Font.BOLD, BaseColor.DARK_GRAY)));
                    OrdersDoc.add(new Paragraph(" "));
                    PdfPTable tablesup= new PdfPTable(7);
                    int[] wd = new int[] {10,50,40,20,20,20,20};
                    tablesup.setWidths(wd);

                    PdfPCell cell = new PdfPCell(new Paragraph("Orders"));
                    cell.setColspan(8);
                    cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                    cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    tablesup.addCell(cell);
                    
                    Font font = new Font(FontFamily.TIMES_ROMAN, 11, Font.BOLD, BaseColor.DARK_GRAY);    
                    tablesup.addCell(new Phrase("Nr",font));
                    tablesup.addCell(new Phrase("Item",font));
                    tablesup.addCell(new Phrase("Customer",font));
                    tablesup.addCell(new Phrase("Date",font));
                    tablesup.addCell(new Phrase("Buying",font));
                    tablesup.addCell(new Phrase("Selling",font));
                    tablesup.addCell(new Phrase("Profit",font));

                    
                    
          try (java.sql.Connection connection = DriverManager.getConnection(url, username, password)) {
             //System.out.println("Database connected!");
             Statement stmt = connection.createStatement();
             Statement stmt2 = connection.createStatement();
             String strsql = "SELECT items.Name,customers.Name,orders.DeliveryDate,items.BuyingPrice,orders.Totalpayment FROM orders"
                     +" Join items ON orders.ItemID = items.ItemID "
                     +" Join customers ON orders.CustomerID = customers.CustomerID "
                     +" WHERE orders.status = 'Completed' AND orders.DeliveryDate BETWEEN '"+ FROM + "' AND '" + TO + "'";
             

             
             ResultSet rs = stmt.executeQuery(strsql);
             ResultSet rs2 = null;
             int i = 0;
             int profit = 0;
             int sumprofit = 0;
             int sumbuy = 0;
             int sumsell =0;
             int sumshipment = 0;
             int shipmentitemcount = 0;
             int sumcosts = 0;
             font = new Font(FontFamily.HELVETICA, 8, Font.NORMAL);
             Font bluefont = new Font(FontFamily.HELVETICA, 8, Font.NORMAL ,BaseColor.BLUE);
             while(rs.next())
             {
                    i++;
                    profit = Integer.parseInt(rs.getString("orders.TotalPayment")) - Integer.parseInt(rs.getString("items.BuyingPrice"));
                    sumprofit = sumprofit + profit;
                    sumbuy = sumbuy + Integer.parseInt(rs.getString("items.BuyingPrice"));
                    sumsell = sumsell + Integer.parseInt(rs.getString("orders.TotalPayment"));
                    tablesup.addCell(new Phrase(i+"",font));
                    tablesup.addCell(new Phrase(rs.getString("items.Name"),font));
                    tablesup.addCell(new Phrase(rs.getString("customers.Name"),font));
                    tablesup.addCell(new Phrase(rs.getDate("orders.DeliveryDate").toString(),font));
                    tablesup.addCell(new Phrase(rs.getString("items.BuyingPrice"),font));
                    tablesup.addCell(new Phrase(rs.getString("orders.TotalPayment"),font));
                    tablesup.addCell(new Phrase(profit+"",bluefont));
                    
             }
                    cell = new PdfPCell(new Paragraph("Total of "+ i +" Orders",font));
                    cell.setColspan(7);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    tablesup.addCell(cell);
                    
                    cell = new PdfPCell(new Phrase("Total Buying Amount: " +sumbuy,font));
                    cell.setColspan(7);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.CYAN);
                    tablesup.addCell(cell);
                    
                    cell = new PdfPCell(new Phrase("Total Selling Amount: " +sumsell,font));
                    cell.setColspan(7);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.GREEN);
                    tablesup.addCell(cell);
                    
                    font = new Font(FontFamily.HELVETICA, 8, Font.BOLD);
                    cell = new PdfPCell(new Phrase("Total Profit: "+ sumprofit,font));
                    cell.setColspan(7);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.YELLOW);
                    tablesup.addCell(cell);

                    OrdersDoc.add(tablesup);
                    
                    
                    // Shipment
                    OrdersDoc.add(new Paragraph(" "));
                    strsql = "SELECT Distinct(orders.ShipmentID) as shid,shipment.Name,shipment.Price,shipment.Weight,shipment.DeliveryDate,shipment.Date FROM orders"
                     +" Join shipment ON orders.ShipmentID = shipment.ShipmentID "
                     +" WHERE orders.status = 'Completed' AND orders.DeliveryDate BETWEEN '"+ FROM + "' AND '" + TO + "'";
                    String strsql2 = "";
           
                    rs = stmt.executeQuery(strsql);
                    String shipmentItemslist = "";
                    tablesup= new PdfPTable(6);
                    wd = new int[] {10,50,20,20,25,25};
                    tablesup.setWidths(wd);

                    cell = new PdfPCell(new Paragraph("Shipments"));
                    cell.setColspan(6);
                    cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                    cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    tablesup.addCell(cell);
                    i = 0;
                    font = new Font(FontFamily.TIMES_ROMAN, 11, Font.BOLD, BaseColor.DARK_GRAY);    
                    tablesup.addCell(new Phrase("Nr",font));
                    tablesup.addCell(new Phrase("Name",font));
                    tablesup.addCell(new Phrase("Price",font));
                    tablesup.addCell(new Phrase("Weight",font));
                    tablesup.addCell(new Phrase("Sent",font));
                    tablesup.addCell(new Phrase("Arrived",font));
                    
                    while(rs.next())
                    {
                        sumshipment = Integer.parseInt(rs.getString("shipment.Price")) + sumshipment;
                        i++;
                        font = new Font(FontFamily.HELVETICA, 8, Font.NORMAL);
                        tablesup.addCell(new Phrase(i+"",font));
                        tablesup.addCell(new Phrase(rs.getString("shipment.Name"),font));
                        tablesup.addCell(new Phrase(rs.getString("shipment.Price"),font));
                        tablesup.addCell(new Phrase(rs.getString("shipment.Weight"),font));
                        tablesup.addCell(new Phrase(rs.getDate("shipment.Date").toString(),font));
                        tablesup.addCell(new Phrase(rs.getDate("shipment.DeliveryDate").toString(),font));
                        
                        //get all the items
                        strsql2 = "Select items.Name from items "
                                + "Join orders on items.ItemID = orders.ItemID "
                                + "WHERE orders.ShipmentID = '" + rs.getString("shid") + "'";
                         rs2 = stmt2.executeQuery(strsql2);
                           while(rs2.next())
                           {
                               shipmentitemcount++;
                               if(shipmentItemslist != "")
                               shipmentItemslist = shipmentItemslist + " , " + rs2.getString("items.Name");
                               else 
                               shipmentItemslist = shipmentItemslist + " " + rs2.getString("items.Name");    
                           }
                           
                        font = new Font(FontFamily.HELVETICA, 6, Font.NORMAL);
                        cell = new PdfPCell(new Paragraph(shipmentItemslist,font));
                        cell.setColspan(6);
                        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                        
                        tablesup.addCell(cell);
                        shipmentItemslist = "";
                        
                    }
                     rs2.close();
                     stmt2.close();
                    font = new Font(FontFamily.HELVETICA, 10, Font.NORMAL);
                    cell = new PdfPCell(new Paragraph("Total of "+ shipmentitemcount +" Items",font));
                    cell.setColspan(6);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    tablesup.addCell(cell);
                    
                    cell = new PdfPCell(new Phrase("Total Shipment Cost: " +sumshipment,font));
                    cell.setColspan(6);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.CYAN);
                    tablesup.addCell(cell);
                    OrdersDoc.add(tablesup);
                    
                    
                    //extra costs
                    OrdersDoc.add(new Paragraph(" "));
                    strsql = "SELECT * From costs "+
                     " WHERE Date BETWEEN '"+ FROM + "' AND '" + TO + "'";
           
                    rs = stmt.executeQuery(strsql);
                    tablesup= new PdfPTable(4);
                    wd = new int[] {10,25,20,100};
                    tablesup.setWidths(wd);

                    cell = new PdfPCell(new Paragraph("Extra Costs"));
                    cell.setColspan(4);
                    cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                    cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    tablesup.addCell(cell);
                    if(!rs.next())
                    {
                        font = new Font(FontFamily.HELVETICA, 10, Font.NORMAL);
                        cell = new PdfPCell(new Phrase("No Extra Costs",font));
                         cell.setColspan(4);
                         cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                          cell.setBackgroundColor(BaseColor.CYAN);
                             tablesup.addCell(cell);
                    }
                    else
                    {
                        rs.beforeFirst();
                    i = 0;
                    font = new Font(FontFamily.TIMES_ROMAN, 11, Font.BOLD, BaseColor.DARK_GRAY);   
                    tablesup.addCell(new Phrase("Nr",font));
                    tablesup.addCell(new Phrase("Date",font));
                    tablesup.addCell(new Phrase("Amount",font));
                    tablesup.addCell(new Phrase("Descriptions",font));
                    font = new Font(FontFamily.HELVETICA, 8, Font.NORMAL);
                    while(rs.next())
                    {
                        sumcosts = sumcosts + Integer.parseInt(rs.getString("Amount"));
                        i++;
                        tablesup.addCell(new Phrase(i+"",font));
                        tablesup.addCell(new Phrase(rs.getDate("Date").toString(),font));
                        tablesup.addCell(new Phrase(rs.getString("Amount"),font));
                        tablesup.addCell(new Phrase(rs.getString("Descriptions"),font));
                        
                    }
                    font = new Font(FontFamily.HELVETICA, 10, Font.NORMAL);
                    cell = new PdfPCell(new Phrase("Total Extra Cost: " +sumcosts,font));
                    cell.setColspan(4);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.CYAN);
                    tablesup.addCell(cell);
                    
                    }
                    OrdersDoc.add(tablesup);
                    
                    
                    OrdersDoc.add(new Paragraph(" "));
                    tablesup= new PdfPTable(1);
                    
                    tablesup.addCell(cell);
                    cell = new PdfPCell(new Paragraph("Total  Selling Profit: " + sumprofit) );
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.GREEN);
                    
                    int sumcostship = sumcosts+sumshipment;
                    cell = new PdfPCell(new Paragraph("Total Extra Costs and Shipments: " + sumcostship ) );
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.CYAN);
 
                    tablesup.addCell(cell);
                    
                    font = new Font(FontFamily.HELVETICA, 10, Font.BOLD);
                    int finalprofit = sumprofit - sumcostship;
                    cell = new PdfPCell(new Paragraph("Total Final Profit: " + finalprofit ,font) );
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(BaseColor.YELLOW);
   
                    tablesup.addCell(cell);
                      OrdersDoc.add(tablesup);
                    
                    
                    

                    
                    
             rs.close(); 
             stmt.close();
             connection.close();
             OrdersDoc.close();
             
            } catch (SQLException e) {
               System.out.println(e.toString());
            }


       JOptionPane.showMessageDialog(null, "Report Saved...");
       File file = new File(System.getProperty("user.dir") + "/Reports/"+FROM+"TO"+TO+".pdf");
       Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(file);
        } catch (IOException ex) {
            Logger.getLogger(HippieRockShop.class.getName()).log(Level.SEVERE, null, ex);
        }

        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
    }

 
    


}
